@rendermode InteractiveServer
@using System.Text
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Encodings.Web
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorBootstrap
@using System.Reflection;
@using System;
@using Gatekeeper.Models;
@implements IDisposable;
@inject LoginState loginState;
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject ISearchRequestfeeService searchrequestfeeService
@inject IAnalystsService analystService
@inject IRequestfileService requestFileService
@inject IAuditlogService auditlogService
@inject NavigationManager navigationManager

@inject IDbContextFactory<AppDbContext> DbFactory



@code {
    
    #region "Variables"
    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }


    private System.Security.Claims.ClaimsPrincipal user;
    private string? userReg;
    protected string Message = string.Empty;
    protected string StatusClass = string.Empty;
    private bool Saved;

    [Parameter]
    public string savetype { get; set; } = string.Empty;

    private string FileNumber = string.Empty;
    private bool alertMessageShow = false;

    [Parameter]
    public int fileid { get; set; }

    //Audit
    private AuditLog auditlog = new AuditLog();

    [Inject]
    private AuthenticationStateProvider GetAuthenticationStateAsync { get; set; }


    [Parameter]
    public Requestfee requestfee { get; set; } 

    [Parameter]
    public List<Requestfee> requestfees { get; set; } = new List<Requestfee>();

    [Inject]
    private IRequestfeeService RequestfeeService { get; set; }
    // private Requestfee requestfee { get; set; } = new Requestfee();
    // private Requestfee orequestfee { get; set; } = new Requestfee();
    // private List<Requestfee> requestfees { get; set; } = new List<Requestfee>();

    [Parameter]
    public Requestfile requestfile { get; set; } = new Requestfile();
    private Requestfee orequestfee { get; set; } = new Requestfee();
    [Parameter]
    public List<Analyst>? analysts { get; set; } = new List<Analyst>();


    //Data Grid -- Blazor QuickGrid
    // private IQueryable<SearchRequestfee> searchrequestfees;

    [Parameter]
    public List<SearchRequestfee> searchrequestfees { get; set; } = new List<SearchRequestfee>();
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };



    //private GlobalSettings globalSettings = new GlobalSettings;

    #endregion


    #region "Component Lifecycle"
    protected async override Task OnInitializedAsync()
    {
        
    }

  
    protected override async Task OnParametersSetAsync()
    {


        if (requestfile != null )
        {
            if (requestfile.Id > 0 && FileNumber == "")
            {

                FileNumber = requestfile.Filenumber.ToString() ;
            }
        }

    }

    public void Dispose()
    {
        loginState.OnChange -= StateHasChanged;
    }

    protected async override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            using var context = DbFactory.CreateDbContext();
            if (fileid == 0)
            {
                var RQID = await sessionStorage.GetItemAsync<string>("RQID");
                fileid = Int32.Parse(RQID);
                if (loginState.gFileId == 0 || loginState.gFileId == null)
                {
                    loginState.SetLogin(await context.Requestfiles.FirstOrDefaultAsync(x => x.Id == fileid));
                }
                requestfile = await context.Requestfiles.FirstOrDefaultAsync(x => x.Id == fileid);
                FileNumber = requestfile.Filenumber.ToString();

              

            }

            LoadData();
            requestfee.Requestid = fileid;

            StateHasChanged();
            firstRender = false;
        }
    }
    #endregion

    #region "Methods"

    private async void LoadData()
    {
        if (searchrequestfees.Count == 0)
        {
            searchrequestfees = searchrequestfeeService.GetRequestfeeList(fileid).ToList();
        }
    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        Message = "There are some validation errors. Please try again.";
    }

    protected async Task HandleValidSubmit()
    {
        // Saved = false;

        // requestfee.Moddate = DateTime.Now;
        // requestfee.Moduser = userReg;

        // if (savetype == "update")
        // {
        //     await RequestfeeService.UpdateRequestfee(requestfee);
        //     await AuditData("Update Requestfee", "update");
        // }
        // else
        // {
        //     requestfee.Createdate = DateTime.Now;
        //     requestfee.Createuser = userReg;
        //     await RequestfeeService.CreateRequestfee(requestfee);
        //     //await AuditData("Create Requestfee", "create");

        // }

        // StatusClass = "alert-success";
        // Message = "Data updated successfully";
        // alertMessageShow = true;
        // await InvokeAsync(() => StateHasChanged());
        // await Task.Delay(1000);

        // alertMessageShow = false;
        // Saved = true;
        // navigationManager.NavigateTo($"/requestfee/add/{fileid}", true);
        // LoadData();
        // requestfee = new Requestfee();
        // StateHasChanged();
    }

    private async Task AuditData(string act, string type)
    {
        auditlog = new AuditLog();
        auditlog.AccessDate = DateTime.Now;
        auditlog.RegNo = userReg;
        auditlog.Sdate = DateTime.Now;
        auditlog.UserName = userReg;
        auditlog.AccessSystem = "GateKeeper";
        auditlog.Activity = act;
        auditlog.ActivityXml = auditlogService.GetAuditxml(orequestfee, requestfee, act).ToString();

        if (type == "update" || type == "delete")
        {
            auditlog.ActivityXml = auditlogService.GetAuditxml(orequestfee, requestfee, act).ToString();
        }

        await auditlogService.CreateAuditlog(auditlog);
    }

    private  void UpdateData(int id)
    {
        savetype = "";
        if (id > 0)
        {
            savetype = "update";
            //orequestfee = await RequestfeeService.GetRequestfeeById(id);
            requestfee = requestfees.Where(x => x.Id == id).FirstOrDefault();

            StateHasChanged();
        }
    }


    private ConfirmDialog dialog = default!;
    private async Task ShowConfirmationAsync(int id)
    {
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the record. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            if (id != null && id > 0)
            {
                requestfee = await RequestfeeService.GetRequestfeeById(id);
                await RequestfeeService.DeleteRequestfee(requestfee);
                AuditData("Delete Requestfee", "delete");
            }

            StatusClass = "alert-success";
            Message = "Data deleted successfully";
            alertMessageShow = true;
            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(1000);

            alertMessageShow = false;
            Saved = true;

            navigationManager.NavigateTo($"/Feepayment/add/", true);

          // LoadData();
          // StateHasChanged();
        }
        else
        {
            // do something
        }
    }

    private void setfinalcost()
    {
        if (requestfee.Feewaived == "Yes")
        {
            requestfee.Finalcost = 0;
        }
        else
        {
            requestfee.Finalcost = requestfee.Estimatedcost;
        }
        StateHasChanged();
    }

    private void FillData()
    {
        // requestfee.Id = 1;
        requestfee.Requestid = fileid;
        requestfee.Description = "description";
        requestfee.Estimatedcost = 100;
        requestfee.Requested = "Yes";
        requestfee.Feewaived = "Yes";
        requestfee.Finalcost = 100;
        requestfee.Createdate = DateTime.Now;
        requestfee.Createuser = userReg;
        requestfee.Moddate = DateTime.Now;
        requestfee.Moduser = userReg;
        // requestfee.Status = "status";

    }
    #endregion
}

<EditForm Model="@requestfee" >
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container-fluid">
        <div class="row">
           
            <div class="col-lg-2 col-md-2 col-sm-12">
                <label for="lbfileid">
                    File Number:
                </label>
                <input type="text" readonly id="fileid" class="form-control" value="@FileNumber" style="background-color:lightgray" />
            </div>
            <div class="col-lg-3 col-md-4 col-sm-12">
                <label for="lbdescription">
                    Fee Description:
                </label>
                <InputText id="description" class="form-control" placeholder="DESCRIPTION" @bind-Value="requestfee.Description" />
            </div>
            <div class="col-lg-2 col-md-3 col-sm-12">
                <label for="lbestimatedcost">
                    Estimated Cost:
                </label>
                <InputNumber id="estimatedcost" class="form-control" placeholder="ESTIMATED COST" @onchange="setfinalcost" @onblur="setfinalcost" @bind-Value="requestfee.Estimatedcost" />
            </div>
            <div class="col-lg-1 col-md-2 col-sm-12">
                <label for="lbrequested">
                    Requested:
                </label>
                <InputSelect id="requested" class="form-control" placeholder="REQUESTED" @bind-Value="requestfee.Requested">
                    <option value="-1">Select...</option>
                    <option value="Yes">Yes</option>
                    <option value="No">No</option>
                </InputSelect>
            </div>
            <div class="col-lg-1 col-md-2 col-sm-12">
                <label for="lbfeewaived">
                    Fee Waived:
                </label>
                <InputSelect id="feewaived" class="form-control" placeholder="FEE WAIVED" @onchange="setfinalcost" @onblur="setfinalcost" @bind-Value="requestfee.Feewaived">
                    <option value="-1">Select...</option>
                    <option value="Yes">Yes</option>
                    <option value="No">No</option>
                </InputSelect>
            </div>
            <div class="col-lg-2 col-md-3 col-sm-12">
                <label for="lbfinalcost">
                    Final Cost:
                </label>
                <InputNumber id="finalcost" class="form-control" placeholder="FINAL COST" @bind-Value="requestfee.Finalcost" />
            </div>
        </div>
    </div>
</EditForm>

<br />

<ConfirmDialog @ref="dialog" />

<table class="table table-striped">
    <thead class="table-info">
        <tr>

            <th scope="col">Fee Description</th>
            <th scope="col">Estimated Cost</th>
            <th scope="col">Requested</th>
            <th scope="col">Feewaived</th>
            <th scope="col">Final Cost</th>
            <th scope="col">Action</th>
        </tr>
    </thead>
    <tbody>
        @if (searchrequestfees != null)
        {
            @foreach (var item in searchrequestfees)
            {
                @if (item != null)
                {
                    <tr>
                        <td>@item.Description</td>
                        <td>@item.Estimatedcost</td>
                        <td>@item.Requested</td>
                        <td>@item.Feewaived</td>
                        <td>@item.Finalcost</td>

                        <td>
                            <button type="button" class="btn btn-primary" onclick="@(()=>UpdateData(item.Id))">Edit</button>
                            <button type="button" class="btn btn-primary" onclick="@(()=>ShowConfirmationAsync(item.Id))">Del</button>
                        </td>
                    </tr>
                }
            }
        }
        else
        {
            <tr>
                <td>  </td>
                <td>  </td>
            </tr>
        }
    </tbody>
</table>
