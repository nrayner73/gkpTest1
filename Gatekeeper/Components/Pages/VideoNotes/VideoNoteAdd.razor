@rendermode InteractiveServer
@using System.Text
@using BlazorBootstrap
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Encodings.Web
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Reflection;
@using System;

@inject IConfiguration Configuration
@inject IDbContextFactory<AppDbContext> DbFactory

@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@inject ISearchVideonoteService searchnoteService
@inject IAnalystService analystService
@inject IRequestfileService requestFileService
@inject IAuditlogService auditlogService
@inject NavigationManager navigationManager

@inject AppState appState
@implements IDisposable
@inject LoginState loginState;


@page "/videonotes/add/{fileid:int?}"


@code {
    #region "Variables"
    private System.Security.Claims.ClaimsPrincipal user;
    private string? userReg;
    protected string Message = string.Empty;
    protected string StatusClass = string.Empty;
    private bool Saved;
    private string savetype = string.Empty;
    private string FileNumber = string.Empty;
    private bool alertMessageShow = false;

    //Audit
    private AuditLog auditlog = new AuditLog();

    [Inject]
    private AuthenticationStateProvider GetAuthenticationStateAsync { get; set; }

    [Parameter]
    public int fileid { get; set; }

    [Inject]
    private IAnalystnoteService AnalystnoteService { get; set; }
    [Inject]
    private IVideonoteService VideonotesService { get; set; }
    private Videonote videonote { get; set; } = new Videonote();
    private Videonote ovideonote { get; set; } = new Videonote();
    private List<Videonote> videonotes { get; set; } = new List<Videonote>();

    private Requestfile requestfile { get; set; } = new Requestfile();
    public List<Analyst>? analysts { get; set; } = new List<Analyst>();


    // Data Grid -- Blazor QuickGrid
    private IQueryable<SearchVideoNotes> searchvideonotes;
    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };
    //QuickGrid<SearchVideoNotes>? grid;

    bool tester = true;
    bool showpanel = true;
    bool shownotes = true;
    bool showid = false;

    #endregion


    #region "Component Lifecycle"
    protected async override Task OnInitializedAsync()
    {
        loginState.OnChange += StateHasChanged;
        getDataContext();

        // var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        // var user = authstate.User;
        // var name = user.Identity.Name;

        // loginState.OnChange += StateHasChanged;

        // if (loginState.gFileId > 0)
        // {
        //     fileid = (int)loginState.gFileId;
        //     FileNumber = loginState.gFileNumber;

        //     requestfile = loginState.Requestfile;
        //     videonote.Requestid = fileid;

        //     LoadData();
        //     StateHasChanged();
        // }
    }

    public void Dispose()
    {
        loginState.OnChange -= StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userReg = user.Identity?.Name.ToString().ToUpper().Replace("CPSENTERPRISE\\", "");
     
    }


    protected async override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            //highlight selected to menu and set enable child menu
            JSRuntime.InvokeVoidAsync("showTopmenu");
            JSRuntime.InvokeVoidAsync("activetab");
            JSRuntime.InvokeVoidAsync("changetab", "video-tab");

            //set save type
            savetype = string.Empty;

            //read data from session
            var RQID = await sessionStorage.GetItemAsync<string>("RQID");
            if (RQID != "0" && RQID != null)
            {
                fileid = Int32.Parse(RQID);
                // get data context
                getDataContext();

                loginState.OnChange += StateHasChanged;
                // Load data to grid
                LoadData();

                // assign current date and current log on user to create date, mod date, create user and mod user
                videonote.Createuser = userReg;
                videonote.Moduser = userReg;
                videonote.Analystid = analysts.Where(x => x.Regno == userReg).FirstOrDefault().Id;
                videonote.Moddate = DateTime.Today;
                videonote.Enterdate = DateTime.Today;
                videonote.Requestid = fileid;

            }

            StateHasChanged();
            firstRender = false;
        }
    }
    #endregion
    #region "Methods"
    public void getDataContext()
    {
        using (var context = DbFactory.CreateDbContext())
        {
            //get analyst lookup data
            analysts = context.Analysts.ToList();
            if (fileid > 0)
            {
                if (loginState.gFileId == 0 || loginState.gFileId == null)
                {
                    //set state login
                    loginState.SetLogin(context.Requestfiles.FirstOrDefault(x => x.Id == fileid));
                }
                requestfile = loginState.Requestfile;
                FileNumber = loginState.Requestfile.Filenumber;

            }
        }
        StateHasChanged();
    }

    private void LoadData()
    {
        searchvideonotes = searchnoteService.GetVideotnoteList(fileid).AsQueryable<SearchVideoNotes>();
    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        Message = "There are some validation errors. Please try again.";
    }

    protected async Task HandleValidSubmit()
    {
        Saved = false;

        videonote.Moddate = DateTime.Now;
        videonote.Moduser = userReg;

        if (savetype == "update")
        {
            await VideonotesService.UpdateVideonote(videonote);
            await AuditData("Update Videonotes", "update");
        }
        else
        {
            videonote.Createdate = DateTime.Now;
            videonote.Createuser = userReg;
            await VideonotesService.CreateVideonote(videonote);
            await AuditData("Create Videonotes", "create");

        }

        StatusClass = "alert-success";
        Message = "Data updated successfully";
        alertMessageShow = true;
        await InvokeAsync(() => StateHasChanged());
        await Task.Delay(1000);

        alertMessageShow = false;
        Saved = true;

        videonote = new Videonote();
        navigationManager.NavigateTo($"/videonotes/add/{fileid}", true);

        //LoadData();
        //StateHasChanged();
    }

    private void FillData()
    {
        videonote.Requestid = fileid;
        videonote.Enterdate = DateTime.Now;
        videonote.Analystid = 1;
        videonote.Notes = "notes";
        videonote.Timetaken = "timetaken";
        videonote.Status = "1";
        videonote.Moddate = DateTime.Now;
        videonote.Moduser = userReg;
        videonote.Createdate = DateTime.Now;
        videonote.Createuser = userReg;

    }

    private async Task AuditData(string act, string type)
    {
        auditlog = new AuditLog();

        auditlog.AccessDate = DateTime.Now;
        auditlog.RegNo = userReg;
        auditlog.Sdate = DateTime.Now;
        auditlog.UserName = userReg;
        auditlog.AccessSystem = "GateKeeper";
        auditlog.Activity = act;
        auditlog.ActivityXml = auditlogService.GetAuditxml(ovideonote, videonote, act).ToString();

        if (type == "update" || type == "delete")
        {
            auditlog.ActivityXml = auditlogService.GetAuditxml(ovideonote, videonote, act).ToString();
        }

        await auditlogService.CreateAuditlog(auditlog);
    }



    private async void UpdateData(int id)
    {
        savetype = "";
        if (id > 0)
        {
            savetype = "update";
            using (var context = DbFactory.CreateDbContext())
            {
                if (id != null && id > 0)
                {

                    videonote = context.Videonotes.Where(x => x.Id == id).FirstOrDefault();
                    ovideonote = (Videonote)context.Entry(videonote).GetDatabaseValues().ToObject();
                    StateHasChanged();
                }
            }
        }
    }

    private ConfirmDialog dialog = default!;
    private async Task ShowConfirmationAsync(int id)
    {
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the record. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            if (id != null && id > 0)
            {
                videonote = await VideonotesService.GetVideonoteById(id);
                await VideonotesService.DeleteVideonote(videonote);
                AuditData("Delete Analyst Note", "delete");
            }

            StatusClass = "alert-success";
            Message = "Data deleted successfully";
            alertMessageShow = true;
            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(1000);

            alertMessageShow = false;
            Saved = true;

            LoadData();
            StateHasChanged();
        }
       
    }

    private void ClearData()
    {
        videonote = new Videonote();

    }
    #endregion
}

<h5>VideoNote</h5>

<EditForm Model="@videonote" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbfileid">
                    File Number:
                </label>
                <input type="text" readonly id="fileid" class="form-control" value="@FileNumber" style="background-color:lightgray" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbenterdate">
                    Enterdate:
                </label>
                <InputDate id="enterdate" class="form-control" placeholder="ENTERDATE" @bind-Value="videonote.Enterdate" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbanalyst">
                    Analyst:
                </label>
                <InputSelect id="analyst" class="form-control" placeholder="ANALYST" @bind-Value="videonote.Analystid">
                    <option value="-1">Select...</option>
                    @foreach (var lktype in analysts)
                    {
                        <option value="@lktype.Id">@lktype.Displayname</option>
                    }
                </InputSelect>
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbtimetaken">
                    Timetaken:
                </label>
                <InputText id="timetaken" class="form-control" placeholder="TIMETAKEN" @bind-Value="videonote.Timetaken" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbnotes">
                    Notes:
                </label>
                <InputTextArea id="notes" class="form-control" placeholder="NOTES" @bind-Value="videonote.Notes" row="15" col="250" style="min-height: 130px; overflow:auto;" />
            </div>

        </div>
    </div>

    <hr />
    @if (tester)
    {
        <button type="button" class="btn btn-primary" @onclick="FillData">Fill Data</button>

    }
    <button type="button" class="btn btn-primary" @onclick="ClearData">Add New</button>
    <button type="submit" class="btn btn-primary">Save</button>


</EditForm>

<br />

<div class="row" style="width:100%;padding-bottom: 1em;">
    <div class="col-lg-5" style="float:left">
        Show:
        <label><input type="checkbox" @bind="shownotes" /> Notes</label>

    </div>
    <div class="col-lg-5" style="float:left">
        <div class="page-size-chooser">
            Items per page:
            <select @bind="@pagination.ItemsPerPage">
                <option>5</option>
                <option>10</option>
                <option>20</option>
            </select>

        </div>
    </div>
    <div class="col-lg-2" style="float:revert">
        <div class="page-size-chooser">
        </div>
    </div>
</div>

<ConfirmDialog @ref="dialog" />


<div class="grid" tabindex="-1">
    <QuickGrid Items="@searchvideonotes" Virtualize="true" Pagination="@pagination">
        @if (showid)
        {
            <PropertyColumn Property="@(r => r.Id)" Title="Id" Sortable="true" class="col-width" />
        }
        @if (shownotes)
        {
            <PropertyColumn Property="@(r => r.Notes)" Title="Notes" Sortable="true" class="col-width" />
        }

        <PropertyColumn Property="@(r => r.Timetaken)" Title="Time Taken" Sortable="true" />
        <PropertyColumn Property="@(r => r.Enterdate)" Title="Enter Date" Sortable="true" />
        <PropertyColumn Property="@(r => r.Analyst)" Title="Analyst" Sortable="true" />
        <TemplateColumn Title="Actions">
            <button type="button" class="btn btn-primary" onclick="@(()=>UpdateData(context.Id))">Edit</button>
            <button type="button" class="btn btn-primary" onclick="@(()=>ShowConfirmationAsync(context.Id))">Del</button>
        </TemplateColumn>
    </QuickGrid>
</div>

<Paginator State="@pagination" />