@rendermode InteractiveServer
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IPersonnameService personNameService
@inject IAddressService addressService
@inject IDateService dateService

@using Gatekeeper.Models.MenuInfo
@using Gatekeeper.CustomValidators
@using System.Text
@using System.Web
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Encodings.Web
@using Gatekeeper.Classes;
@using System.Text.RegularExpressions
@using BlazorBootstrap

@inject IConfiguration Configuration
@inject AuthenticationStateProvider authenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService session
@inject IDbContextFactory<AppDbContext> DbFactory

@inject IAuditlogService auditlogService
@inject IJSRuntime JSRuntime
@inject IDateService dateService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject LoginState loginState;
@inject AppState appState;
@inject NavigationManager navigationManager
@inject ISearchrequestfileService searchfileService

@page "/accessrequests/add/{fileid:int?}"

@code {
    #region "Parameters"

    protected bool IsDisabled { get; set; }
    private string ModalTitle = string.Empty;
    //Audit
    private AuditLog auditlog = new AuditLog();
    bool otherreason = false;
    bool setTestdata = false;

    private bool tester = false;
    bool fileIsClosed = false;

    [Parameter]
    public int fileid { get; set; }

    public enum PopUpType
    {
        Alert,
        Info,
        Success
    }

    public PopUpType popUpType;

    public List<string> AlertText1 = new List<string>();
    public List<string> AlertText2 = new List<string>();

    [Inject]
    private IRequestfileService requestFileService { get; set; }
    private Requestfile requestfile { get; set; } = new Requestfile();
    private Requestfile orequestfile = new Requestfile();
    private Requestfile Sessionrequestfile { get; set; } = new Requestfile();
    private List<Requestfile>? requestfiles { get; set; } = new List<Requestfile>();

    [Inject]
    private IPersonService personService { get; set; }
    private List<Person> persons { get; set; } = new List<Person>();
    public List<Holiday>? holidays { get; set; } = new List<Holiday>();
    private Person person { get; set; } = new Person();
    private Person operson { get; set; } = new Person();

    private AccessRequestForm accessRequestForm { get; set; } = new AccessRequestForm();

    private bool alertMessageShow = false;
    private string? SuccessMessage { get; set; }

    public List<LkRequesttype>? requestTypes { get; set; } = new List<LkRequesttype>();

    private string thisMachine = string.Empty;

    [Inject]
    private IExtensionService ExtensionService { get; set; }

    public EventCallback OnCancel { get; set; }

    public EventCallback<bool> OnSubmit { get; set; }
    private Dictionary<string, object> parameters = new Dictionary<string, object>();

    #region Lookup parameters

    public List<LkProcessingdeficiency>? processingDeficiencies { get; set; } = new List<LkProcessingdeficiency>();
    public List<LkRecorddeliverymethod> recordDeliveryMethods { get; set; } = new List<LkRecorddeliverymethod>();
    public List<Analyst>? analysts { get; set; } = new List<Analyst>();
    public List<LkRequeststate>? requestStates { get; set; } = new List<LkRequeststate>();

    private List<Extension> extensions { get; set; } = new List<Extension>();

    string? requestTypeDetail { get; set; } = null;
    string? processingDeficiencyDetail { get; set; } = null;
    string? recordDeliveryMethodDetail { get; set; } = null;
    string? analystAssignedName { get; set; } = null;
    string? requestStateDetail { get; set; } = null;

    public bool saving = false;
    #endregion

    #region TypeAhead Parameters
    public List<POIName>? POIPersonNames { get; set; } = new List<POIName>();
    private POIName POISelectedPersonName;
    private POIName POIPersonName { get; set; } = new POIName();

    public List<CompanyName>? companynames { get; set; } = new List<CompanyName>();
    private CompanyName selectedcompanyname;
    private CompanyName companyname { get; set; } = new CompanyName();

    public List<PersonName>? personnames { get; set; } = new List<PersonName>();
    private PersonName selectedpersonname;
    private PersonName personname { get; set; } = new PersonName();

    public List<AddressInfo>? addresses { get; set; } = new List<AddressInfo>();
    private AddressInfo selectedaddress;
    private AddressInfo address { get; set; } = new AddressInfo();
    #endregion
    #endregion

    #region "Component Lifecycle"

    protected async override Task OnParametersSetAsync()
    {

        if (requestfile.Yearid == 0 || requestfile.Yearid is null)
        {
            requestfile.Filenumber = "TBD";
        }

        var authState = await authenticationProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userReg = user.Identity?.Name.ToString().ToUpper().Replace("CPSENTERPRISE\\", "");

        var AccessPerson = Configuration["Testers"];

        tester = false;
        thisMachine = "";
        if (AccessPerson.Contains(userReg))
        {
            tester = true;
            thisMachine = Environment.MachineName;
        }

        SuccessMessage = "";

        // accessRequestForm = new AccessRequestForm(requestfile, person);
        accessRequestForm.UpdateAccessRequestForm(requestfile, person);
        StateHasChanged();
    }

    private string? userReg;
    protected async override Task OnInitializedAsync()
    {
        GetData();
        GetDataContext();
        // accessRequestForm = new AccessRequestForm(requestfile, person);
        accessRequestForm.UpdateAccessRequestForm(requestfile, person);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            if (fileid > 0)
            {
                await sessionStorage.SetItemAsync("RQID", fileid);
                await sessionStorage.SetItemAsync("objFileRequest", requestfile);
                GetDataContext();
            }
            else
            {
                var RQID = await sessionStorage.GetItemAsync<string>("RQID");

                if (RQID != "0" && RQID != null)
                {
                    fileid = Int32.Parse(RQID);
                }
            }
            GetDataContext();

            #region "set tab and top menu "
            if (fileid > 0)
            {
                JSRuntime.InvokeVoidAsync("activetab");
            }
            else
            {
                JSRuntime.InvokeVoidAsync("disabledtab");
            }

            setTestdata = false;
            JSRuntime.InvokeVoidAsync("showTopmenu");
            JSRuntime.InvokeVoidAsync("changetab", "file-tab");
            #endregion

            StateHasChanged();
            firstRender = false;
        }
    }

    #endregion

    #region "Methods"
    private void ClearData()
    {
        requestfile = new Requestfile();
        person = new Person();
        requestfile.Filenumber = "TBD";
        requestfile.Requeststate = 2;
        // accessRequestForm = new AccessRequestForm(requestfile, person);
        accessRequestForm.UpdateAccessRequestForm(requestfile, person);
        session.ClearAsync();
    }

    private void ValidateData()
    {
        AlertText1 = new List<string>();

        if (accessRequestForm != null)
        {
            if (accessRequestForm.Requestdate == null)
            {
                AlertText1.Add("- Request Date");
            }

            if (accessRequestForm.Receivedate == null)
            {
                AlertText1.Add("- Receive Date");
            }

            if (accessRequestForm.Idviewed == null || accessRequestForm.Idviewed < 0)
            {
                AlertText1.Add("- ID Viewed");
            }

            if (accessRequestForm.Requesttypeid == null || accessRequestForm.Requesttypeid < 0)
            {
                AlertText1.Add("- Request Type");
            }

            if (accessRequestForm.Analystassignedid == null || accessRequestForm.Analystassignedid < 0)
            {
                AlertText1.Add("- Analyst Assigned");
            }

            if (accessRequestForm.Requestdetails == null || accessRequestForm.Requestdetails == "")
            {
                AlertText1.Add("- Request Details");
            }


            if (accessRequestForm.Requeststate != null)
            {
                string reqStateStr = string.Empty;
                using (var context = DbFactory.CreateDbContext())
                {
                    reqStateStr = context.LkRequeststates.Where(x => x.Id == accessRequestForm.Requeststate).FirstOrDefault().Detail.ToString();
                }

                if (reqStateStr.ToLower() == "closed" || reqStateStr.ToLower() == "withdrawn" || reqStateStr.ToLower() == "abandoned")
                {
                    if (accessRequestForm.Closedate == null)
                    {
                        AlertText1.Add("- Specify Closed Date for Closed, Abandoned, and Withdrawn state types.");
                    }
                }

                if (reqStateStr.ToLower() == "active" || reqStateStr.ToLower() == "on hold" || reqStateStr.ToLower() == "under review")
                {
                    if (accessRequestForm.Closedate != null)
                    {
                        AlertText1.Add("- Do not specify a Closed Date for Active, On Hold, or Under Review states.");
                    }
                }
            }

            if (AlertText1.Count > 0)
            {
                AlertText1.Insert(0, "The access file request Information below is required.");
            }
        }
        else
        {
            AlertText1.Add("Access Request is required.");
        }

        AlertText2 = new List<string>();
        if (accessRequestForm != null || accessRequestForm.PersonId == 0)
        {
            if (accessRequestForm.Firstname == null || accessRequestForm.Firstname == "")
            {
                AlertText2.Add("- First Name");
            }

            if (accessRequestForm.Lastname == null || accessRequestForm.Lastname == "")
            {
                AlertText2.Add("- Last Name");
            }

            if (accessRequestForm.Street == null || accessRequestForm.Street == "")
            {
                AlertText2.Add("- Street");
            }

            if (accessRequestForm.City == null || accessRequestForm.City == "")
            {
                AlertText2.Add("- City");
            }

            if (accessRequestForm.Province == null || accessRequestForm.Province == "")
            {
                AlertText2.Add("- Province");
            }

            if (accessRequestForm.Daytimephone == null || accessRequestForm.Daytimephone == "")
            {
                AlertText2.Add("- Daytime Phone");
            }
            if (AlertText2.Count > 0)
            {
                AlertText2.Insert(0, "The person request Information below is required.");
            }
        }
        else
        {
            AlertText2.Add("Person information is required.");
        }
    }

    private Modal modal = default!;

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    private async Task ActivateFile()
    {
        ValidateData();
        if (AlertText1.Count > 0 || AlertText2.Count > 0)
        {
            ModalTitle = "Data was not saved due to missing information. ";
            popUpType = PopUpType.Alert;
            await OnShowModalClick();
            IsDisabled = true;
            //return;
        }
        else
        {
            IsDisabled = false;
            ModalTitle = "Data Details";
            popUpType = PopUpType.Success;
            // await OnHideModalClick();
            if (accessRequestForm.PersonId != 0 && accessRequestForm.Id != 0)
            {
                accessRequestForm.Requeststate = requestStates.Where(x => x.Detail == "Active").FirstOrDefault().Id;
                accessRequestForm.Closedate = null;
                accessRequestForm.Moduser = userReg;
                accessRequestForm.Moddate = DateTime.Today;

                await UpdateFileNumber(accessRequestForm.Id);
                await SaveRequestFileUpdate();
                // UpdateFileNumber(accessRequestForm.Id);


            }

            StateHasChanged();
            SuccessMessage = "The data has been activated successfully";
            await OnShowModalClick();
            //  navigationManager.NavigateTo($"/accessrequests/add/{fileid}", true);
        }

    }

    private async Task ValidSubmit()
    {
        ValidateData();

        if (AlertText1.Count > 0 || AlertText2.Count > 0)
        {
            ModalTitle = "Data was not saved due to missing information. ";
            popUpType = PopUpType.Alert;
            await OnShowModalClick();
            //return;

        }
        else
        {
            saving = true;
            person.UpdatePersonFromForm(accessRequestForm);
            requestfile.updateRequestFile(accessRequestForm);


            if (person.Id != 0 && requestfile.Id != 0)
            {
                person.Moduser = userReg;
                person.Moddate = DateTime.Today;

                requestfile.Moduser = userReg;
                requestfile.Moddate = DateTime.Today;

                await personService.UpdatePerson(person);
                await AuditData("update Person", "update person");
                // await Task.Delay(1000);
                await UpdateFileNumber(requestfile.Id);
                await SaveRequestFileUpdate();
                //UpdateFileNumber(requestfile.Id);
                // SuccessMessage = "The data has been updated successfully";
            }
            else
            {
                if (requestfile.Requeststate == null)
                {
                    requestfile.Requeststate = 2;
                }

                person.Moduser = userReg;
                person.Createdby = userReg;

                person.Moddate = DateTime.Today;
                person.Createdate = DateTime.Today;
                await personService.CreatePerson(person);
                await AuditData("create Person", "create person");
                if (person.Id != null)
                {
                    accessRequestForm.RFPersonid = person.Id;
                    accessRequestForm.Moduser = userReg;
                    accessRequestForm.Createuser = userReg;

                    accessRequestForm.Moddate = DateTime.Today;
                    accessRequestForm.Createdate = DateTime.Today;

                    /*********************************************************/
                    /**** Create Request File without Receive Date First  ****/
                    /*********************************************************/
                    try
                    {
                        await UpdateFileNumber(requestfile.Id);
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("failed to update file number");
                        popUpType = PopUpType.Alert;
                        ModalTitle = "Save Failed";
                        AlertText1 = ["File Number Update failed"];
                        AlertText2 = new List<string>();
                        await OnShowModalClick();
                        return;
                    }

                    await SaveNewRequestFile();

                    accessRequestForm.UpdateAccessRequestForm(requestfile, person);


                    await AuditData("Create RequestFile", "create file");
                    // await Task.Delay(1000);


                    await sessionStorage.SetItemAsync("RQID", requestfile.Id);
                    await sessionStorage.SetItemAsync("objFileRequest", requestfile);
                    loginState.SetLogin(await requestFileService.GetRequestfileById(requestfile.Id));
                    // SuccessMessage = "The data has been saved successfully.";
                }

            }
            // accessRequestForm = new AccessRequestForm(requestfile, person);
            accessRequestForm.UpdateAccessRequestForm(requestfile, person);

            checkIfFileIsClosed();

            if (fileIsClosed)
            {
                IsDisabled = true;
            }
            else
            {
                IsDisabled = false;
            }

            StateHasChanged();
            saving = false;
            // await OnShowModalClick();
        }
    }

    private async Task AuditData(string act, string type)
    {
        auditlog = new AuditLog();

        auditlog.AccessDate = DateTime.Now;
        auditlog.RegNo = userReg;
        auditlog.Sdate = DateTime.Now;
        auditlog.UserName = userReg;
        auditlog.AccessSystem = "GateKeeper";
        auditlog.Activity = act;

        if (type == "update person" || type == "delete person")
        {

            auditlog.ActivityXml = auditlogService.GetAuditxml(operson, person, act).ToString();
        }

        if (type == "update file" || type == "delete file")
        {
            auditlog.ActivityXml = auditlogService.GetAuditxml(orequestfile, requestfile, act).ToString();

        }

        await auditlogService.CreateAuditlog(auditlog);
    }


    private async Task UpdateFileNumber(int fileid)
    {
        // requestfile = requestFileService.CreateRequestFileFromForm(accessRequestForm);
        requestfile.updateRequestFile(accessRequestForm);

        // Requestfile updatefile = requestfile;

        var rtype = requestTypes.Where(x => x.Id == accessRequestForm.Requesttypeid).FirstOrDefault();

        using (var context = DbFactory.CreateDbContext())
        {

            try
            {
                requestfiles = context.Requestfiles.ToList();
            }
            catch (Exception e)
            {
                throw e;
            }

        }

        // If receive date is not null then update file number with new format
        if (requestfile.Filenumber == "TBD" && requestfile.Receivedate != null)
        {
            requestfile = requestfile;

            int year = ((DateTime)requestfile.Receivedate).Year;
            requestfile.Yearid = requestfiles.Where(x => x.Receivedate.ToString().Contains(year.ToString())).Count() + 1;
        }

        if (requestfile.Yearid != null)
        {
            requestfile.Filenumber = ((DateTime)requestfile.Receivedate).Year + "-" + rtype.Refertype + "-" + ((int)requestfile.Yearid).ToString("D4");
            // Start Test Data
            if (setTestdata)
            {
                // updatefile.Referencenumber = "RF " + requestfile.Filenumber;
                // updatefile.Requestdetails = "Request Details For " + requestfile.Filenumber;
                // updatefile.Previousrequests = "Test For " + requestfile.Filenumber;
                // updatefile.Intakenotes = "Intake Notes For " + requestfile.Filenumber;

            }
        }

        accessRequestForm.UpdateAccessRequestForm(requestfile, person);

        // await requestFileService.UpdateRequestfile(updatefile);
        // await AuditData("update RequestFile", "update file");

        // requestfile = updatefile;
        // accessRequestForm.UpdateAccessRequestForm(requestfile, person);
        // StateHasChanged();
    }

    public async Task SaveRequestFileUpdate()
    {
        saving = true;
        requestfile.updateRequestFile(accessRequestForm);
        Requestfile updatefile = requestfile;
        try
        {
            await requestFileService.UpdateRequestfile(updatefile);
        } catch (Exception e)
        {
            popUpType = PopUpType.Alert;
            ModalTitle = "Save Failed";
            AlertText1 = ["Access Request Failed to save"];
            AlertText2 = new List<string>();
            await OnShowModalClick();
            return;
        }

        await AuditData("update RequestFile", "update file");

        requestfile = updatefile;
        accessRequestForm.UpdateAccessRequestForm(requestfile, person);
        StateHasChanged();

        popUpType = PopUpType.Success;
        ModalTitle = "File Saved";
        SuccessMessage = "The data has been updated successfully";
        await OnShowModalClick();
        saving = false;
    }

    public async Task SaveNewRequestFile()
    {
        saving = true;
        requestfile.updateRequestFile(accessRequestForm);
        Requestfile updatefile = requestfile;
        try
        {
            await requestFileService.CreateRequestfile(requestfile);
        }
        catch (Exception e)
        {
            popUpType = PopUpType.Alert;
            ModalTitle = "Save Failed";
            AlertText1 = ["Access Request Failed to save"];
            AlertText2 = new List<string>();
            await OnShowModalClick();
            return;
        }

        await AuditData("update RequestFile", "update file");

        requestfile = updatefile;
        accessRequestForm.UpdateAccessRequestForm(requestfile, person);
        StateHasChanged();

        popUpType = PopUpType.Success;
        ModalTitle = "File Created";
        SuccessMessage = "The data has been saved successfully.";
        await OnShowModalClick();
        saving = false;
    }

    public async Task setDuedate()
    {
        // await Task.Delay(1000);

        if (accessRequestForm.Receivedate != null)
        {
            extensions = (await ExtensionService.GetExtensionList(accessRequestForm.Id)).Where(x => x.Status != "del").ToList();
            try
            {
                await dateService.SetDuedate(accessRequestForm, extensions, holidays);
            } catch (Exception e)
            {
                Console.WriteLine(e);
                throw e;
            }

        }
    }


    public void GetData()
    {
        using (var context = DbFactory.CreateDbContext())
        {
            int? requestTypeID = requestfile.Requesttypeid ?? null;
            if (requestTypeID.HasValue)
            {
                LkRequesttype requestType = context.LkRequesttypes.Where(x => x.Id == requestTypeID).FirstOrDefault();
                requestTypeDetail = requestType.Detail;
            }

            int? processingDeficiencyID = requestfile.Processingdeficiency ?? null;
            if (processingDeficiencyID.HasValue)
            {
                LkProcessingdeficiency processingDeficiency = context.LkProcessingdeficiencies.Where(x => x.Id == processingDeficiencyID).FirstOrDefault();
                processingDeficiencyDetail = processingDeficiency.Detail;
            }

            int? recordDeliveryMethodID = requestfile.Recorddeliverymethodid ?? null;
            if (recordDeliveryMethodID.HasValue)
            {
                LkRecorddeliverymethod recordDeliveryMethod = context.LkRecorddeliverymethods.Where(x => x.Id == recordDeliveryMethodID).FirstOrDefault();
                recordDeliveryMethodDetail = recordDeliveryMethod.Detail;
            }

            int? analystAssignedID = requestfile.Analystassignedid ?? null;
            if (analystAssignedID.HasValue)
            {
                Analyst analystAssigned = context.Analysts.Where(x => x.Id == analystAssignedID).FirstOrDefault();
                analystAssignedName = analystAssigned.Displayname;
            }

            int? requestStateID = requestfile.Requeststate ?? null;
            if (requestStateID.HasValue)
            {
                LkRequeststate requestState = context.LkRequeststates.Where(x => x.Id == requestStateID).FirstOrDefault();
                requestStateDetail = requestState.Detail;
            }
        }
    }

    public void GetDataContext()
    {
        using (var context = DbFactory.CreateDbContext())
        {
            requestTypes = context.LkRequesttypes.Where(x => x.Status != "del").OrderBy(x => x.Sortby).ToList();
            processingDeficiencies = context.LkProcessingdeficiencies.Where(x => x.Status != "del").OrderBy(x => x.SortBy).ToList();

            POIPersonNames = personNameService.GetPOINames();
            companynames = personNameService.GetCompanyNames();
            personnames = personNameService.GetNames();
            addresses = addressService.GetAddress();

            recordDeliveryMethods = context.LkRecorddeliverymethods.Where(x => x.Status != "del").OrderBy(x => x.Sortby).ToList();
            analysts = context.Analysts.Where(x => x.Status != "del").OrderBy(x => x.Sortby).ToList();
            requestStates = context.LkRequeststates.Where(x => x.Status != "del").OrderBy(x => x.Sortby).ToList();
            holidays = context.Holidays.Where(x => x.Status != "del").ToList();

            holidays = context.Holidays.Where(x => x.Status != "del").ToList();
            requestTypes = context.LkRequesttypes.Where(x => x.Status != "del").OrderBy(x => x.Sortby).ToList();




            //requestfiles = context.Requestfiles.ToList(); -- moved to UpdateFileNumber
            if (fileid > 0)
            {
                //assigned Access Request File object
                if (loginState.gFileId == 0 || loginState.gFileId == null)
                {
                    loginState.SetLogin(context.Requestfiles.FirstOrDefault(x => x.Id == fileid));
                }

                requestfile = loginState.Requestfile;
                orequestfile = (Requestfile)context.Entry(requestfile).GetDatabaseValues().ToObject();
                checkIfFileIsClosed();

                if (fileIsClosed)
                {
                    IsDisabled = true;
                }
                else
                {
                    IsDisabled = false;
                }

                if (requestfile.Yearid == 0 || requestfile.Yearid is null)
                {
                    requestfile.Filenumber = "TBD";
                }
                string pattern = "&%23160;";
                Regex defaultRegex = new Regex(pattern);
                MatchCollection matches;

                var _intakeNotes = requestfile.Intakenotes;
                if (!string.IsNullOrEmpty(requestfile.Intakenotes))
                {
                    _intakeNotes = HtmlUtilities.ConvertToPlainText(requestfile.Intakenotes);
                    requestfile.Intakenotes = _intakeNotes.ToString().Replace("&%23160;", "");
                }

                var _requestDetails = requestfile.Requestdetails;
                if (!string.IsNullOrEmpty(requestfile.Requestdetails))
                {
                    _requestDetails = HtmlUtilities.ConvertToPlainText(requestfile.Requestdetails);
                    requestfile.Requestdetails = _requestDetails.ToString().Replace("&%23160;", "");
                }
                person = context.People.Where(x => x.Id == requestfile.Personid).FirstOrDefault();
                operson = (Person)context.Entry(person).GetDatabaseValues().ToObject();

                accessRequestForm.UpdateAccessRequestForm(requestfile, person);
            }
        }
    }
    #endregion

    #region TypeAhead function
    private async Task<IEnumerable<POIName>> SearchPOIPersonName(string searchText)
    {
        return await Task.FromResult(POIPersonNames.Where(x => (x.firstname + x.lastname + x.middlename).ToLower().Contains(searchText.ToLower())));
    }

    private async Task<IEnumerable<CompanyName>> SearchCompanyName(string searchText)
    {
        return await Task.FromResult(companynames.Where(x => (x.companyname).ToLower().Contains(searchText.ToLower())));
    }

    private async Task<IEnumerable<PersonName>> SearchPersonName(string searchText)
    {
        return await Task.FromResult(personnames.Where(x => (x.firstname + x.lastname + x.middlename).ToLower().Contains(searchText.ToLower())));
    }

    private async Task<IEnumerable<AddressInfo>> SearchAddress(string searchText)
    {
        return await Task.FromResult(addresses.Where(x => (x.Street + x.City + x.Country + x.Province + x.Postalcode).ToLower().Contains(searchText.ToLower())));
    }
    #endregion



    private void FillData()
    {
        setTestdata = true;
        person.Firstname = "Donald";
        person.Lastname = "Duck";
        person.Middlename = "D";

        person.Birthdate = DateTime.Today.Date.AddYears(-30);

        person.Email = "dnald@gmail.com";
        person.Daytimephone = "403-305-3197";
        person.Alternatephone = "403-994-888";
        person.Faxphone = "1800-555-784";

        person.Street = "152 1 street";
        person.City = "Calgary";
        person.Province = "Alberta";
        person.Country = "Canada";

        person.Personofinterestfirstname = "Mickey";
        person.Personofinterestlastname = "Mouse";
        person.Personofinterestmiddlename = "MD";

        person.Companyname = "Disney";

        requestfile.Requestdate = DateTime.Today.Date;
        requestfile.Receivedate = DateTime.Today.Date;
        //setDuedate();
        requestfile.Requestduedate = ((DateTime)requestfile.Receivedate).AddDays(30);
        requestfile.Referencenumber = "RF";
        requestfile.Statusnote = "Status Note For";
        requestfile.Idviewed = 0;
        requestfile.Requesttypeid = 1;
        requestfile.Recorddeliverymethodid = 1;
        requestfile.Processingdeficiency = 1;
        requestfile.Analystassignedid = 9;
        requestfile.Requestdetails = "Request Details For";
        requestfile.Previousrequests = "Test";
        requestfile.Intakenotes = "Intake Notes For";
        requestfile.Timeframe = "1 month";
        requestfile.Requeststate = 2;
        requestfile.Moddate = DateTime.Today;
        requestfile.Moduser = userReg;
        requestfile.Createdate = DateTime.Today;
        requestfile.Createuser = userReg;

        accessRequestForm.UpdateAccessRequestForm(requestfile, person);
    }

    public async Task setClosedDateIfStatusIsClosed()
    {
        requestfile.updateRequestFile(accessRequestForm);
        checkIfFileIsClosed();

        if (fileIsClosed)
        {
            popUpType = PopUpType.Info;
            ModalTitle = "Running Record Required";
            SuccessMessage = "Before a file is set to Closed, Abandoned or Withdrawn, you are required to attach the running record. \n\n  If required, please attach the running record to this file before clicking on Save";
            await OnShowModalClick();

            requestfile.Closedate = DateTime.Today.Date;
            accessRequestForm.Closedate = DateTime.Today.Date;
        }
        else
        {
            requestfile.Closedate = null;
            accessRequestForm.Closedate = null;
        }
    }

    public bool checkIfFileIsClosed()
    {
        fileIsClosed = false;
        foreach (LkRequeststate item in requestStates)
        {
            if (requestfile.Requeststate == item.Id && (item.Detail == "Abandoned" || item.Detail == "Closed" || item.Detail == "Withdrawn" ))
            {
                fileIsClosed = true;
                break;
            }
        }
        return fileIsClosed;    
    }
}


<Modal @ref="modal" Size="ModalSize.Large">
    <HeaderTemplate>
        @if (popUpType == PopUpType.Alert)
        {
            <h4 style="color:red">@ModalTitle</h4>
        }
        else
        {
            <h4 style="color:black">@ModalTitle</h4>

        }
    </HeaderTemplate>
    <BodyTemplate>
        @if (popUpType == PopUpType.Alert)
        {
            @if (AlertText1.Count > 0)
            {

                @foreach (var item in AlertText1)
                {
                    <div style="color:red">&nbsp; @item</div>

                }
            }
            @if (AlertText2.Count > 0)
            {

                @foreach (var item in AlertText2)
                {
                    <div style="color:red">&nbsp; @item</div>
                }
            }


        }
        else if (popUpType == PopUpType.Info)
        {
            <div style="white-space:pre-line; text-align:center">&nbsp; @SuccessMessage</div>
        }
        else
        {
            <div style="color:green">&nbsp; @SuccessMessage</div>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
    </FooterTemplate>
</Modal>


<EditForm Model="@accessRequestForm" Context="RequestFileForm" OnValidSubmit="@ValidSubmit" OnInvalidSubmit="@ValidSubmit">
    <DataAnnotationsValidator />


    <div class="container-fluid">
        <br />
        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbfilenumber">
                    File Number:
                </label>
                <InputText id="filenumber" class="form-control" disabled="@IsDisabled" placeholder="FILE NUMBER" @bind-Value="accessRequestForm.Filenumber" style="background-color:lightgray" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <span class="required">*</span> <label for="lbrequestdate">
                    Request Date:
                </label>
                <InputDate id="requestdate" class="form-control" disabled="@IsDisabled" placeholder="REQUEST DATE" @bind-Value="accessRequestForm.Requestdate" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <span class="required">*</span> <label for="lbreceivedate">
                    Received Date:
                </label>
                <InputDate id="receivedate" class="form-control" disabled="@IsDisabled" placeholder="RECEIVE DATE" @onblur="@setDuedate" @bind-Value="accessRequestForm.Receivedate" @bind-Value:after="setDuedate" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbrequestduedate">
                    Request Due Date:
                </label>
                <InputDate id="requestduedate" class="form-control" disabled="@IsDisabled" placeholder="REQUEST DUEDATE" @bind-Value="accessRequestForm.Requestduedate" style="background-color:lightgray" />
            </div>
        </div>

        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbreferencenumber">
                    Reference Number:
                </label>
                <InputText id="referencenumber" class="form-control" disabled="@IsDisabled" placeholder="REFERENCE NUMBER" @bind-Value="accessRequestForm.Referencenumber" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <span class="required">*</span>
                <label for="lbidviewed">
                    ID Viewed:
                </label>
                <InputSelect id="idviewed" class="form-select d-inline" disabled="@IsDisabled" placeholder="ID VIEWED" @bind-Value="accessRequestForm.Idviewed">
                    <option value="">Select...</option>
                    <option value="0">Yes</option>
                    <option value="1">No</option>
                    <option value="2">NA</option>
                </InputSelect>
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <span class="required">*</span>
                <label for="lbrequesttypeid">
                    Request Type:  <b>@requestTypeDetail</b>
                </label>
                <InputSelect id="requesttypeid" class="form-select d-inline" disabled="@IsDisabled" placeholder="REQUEST TYPE" @bind-Value="accessRequestForm.Requesttypeid">
                    <option value="">Select...</option>
                    @foreach (var lktype in requestTypes)
                    {
                        <option value="@lktype.Id">@lktype.Detail</option>
                    }
                </InputSelect>
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbprocessingdeficiency">
                    Processing Deficiency:  <b>@processingDeficiencyDetail</b>
                </label>
                <InputSelect id="processingdeficiency" class="form-select d-inline" disabled="@IsDisabled" placeholder="PROCESSING DEFICIENCY" @bind-Value="accessRequestForm.Processingdeficiency">
                    <option value="">Select...</option>
                    @foreach (var lktype in processingDeficiencies)
                    {
                        <option value="@lktype.Id">@lktype.Detail</option>
                    }
                </InputSelect>
            </div>
        </div>

         <div class="row">

            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbstatusnote">
                    Status Note:
                </label>
                <InputText id="statusnote" class="form-control" placeholder="STATUS NOTE" disabled="@IsDisabled" @bind-Value="accessRequestForm.Statusnote" />
            </div>
        </div>



        @* Requester Company info *@
        <hr />
        <h5>Applicant Name</h5>
        <div class="row">
            <div class="col-lg-6 col-md-3 col-sm-12">
                <div class="input-group ">
                    <label style="font-weight:bold;color:blue;">Search Company Name:</label>
                    <BlazoredTypeahead class="blazored-typeahead__clear" style="background-color:lightyellow" SearchMethod="SearchCompanyName" disabled="@IsDisabled" @bind-Value="selectedcompanyname">
                        <SelectedTemplate Context="companyname">@companyname.companyname. </SelectedTemplate>
                        <ResultTemplate Context="companyname">@companyname.companyname.</ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>

            <div class="col-lg-6 col-md-3 col-sm-12">
                <div class="input-group ">
                    <label style="font-weight:bold;color:blue;">Search Applicant Name:</label>
                    <BlazoredTypeahead class="blazored-typeahead__clear" style="background-color:lightyellow" SearchMethod="SearchPersonName" disabled="@IsDisabled" @bind-Value="selectedpersonname">
                        <SelectedTemplate Context="personname">@personname.firstname @personname.lastname @personname.middlename</SelectedTemplate>
                        <ResultTemplate Context="personname">@personname.firstname @personname.lastname @personname.middlename</ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
        </div>

        @if (selectedcompanyname != null)
        {
            accessRequestForm.Companyname = selectedcompanyname.companyname;
            selectedcompanyname = null;
        }

        @if (selectedpersonname != null)
        {
            accessRequestForm.Firstname = selectedpersonname.firstname;
            accessRequestForm.Lastname = selectedpersonname.lastname;
            accessRequestForm.Middlename = selectedpersonname.middlename;
            selectedpersonname = null;

        }

        <div class="row">
            <div class="col-lg-2 col-md-3 col-sm-12">
                <label>
                    Company:
                </label>
                <InputText id="companyname" class="form-control" disabled="@IsDisabled" @bind-Value="accessRequestForm.Companyname" />
            </div>


            <div class="col-lg-2 col-md-3 col-sm-12">
                <span class="required">*</span>
                <label>First Name:</label>
                <InputText id="firstname" class="form-control" disabled="@IsDisabled" @bind-Value="accessRequestForm.Firstname" />
            </div>

            <div class="col-lg-2 col-md-3 col-sm-12">
                <label>Middle Name:</label>
                <InputText id="middlename" class="form-control" disabled="@IsDisabled" @bind-Value="accessRequestForm.Middlename" />
            </div>

            <div class="col-lg-2 col-md-3 col-sm-12">
                <span class="required">*</span>
                <label>Last Name:</label>
                <InputText id="lastname" class="form-control" disabled="@IsDisabled" @bind-Value="accessRequestForm.Lastname" />
            </div>

            <div class="col-lg-2 col-md-3 col-sm-12">
                <label>Birth Date:</label>
                <InputDate id="birthdate" class="form-control" disabled="@IsDisabled" placeholder="BIRTH DATE" @bind-Value="accessRequestForm.Birthdate" />
            </div>

        </div>


        @* Requester Address *@
        <hr />
        <h5>Applicant Address</h5>
        <div class="row">
            <div class="col-lg-6 col-md-3 col-sm-12">
                <div class="input-group ">
                    <label style="font-weight:bold;color:blue;">Search Address:</label>
                    <BlazoredTypeahead class="blazored-typeahead__clear" style="background-color:lightyellow" SearchMethod="SearchAddress" disabled="@IsDisabled" @bind-Value="selectedaddress">
                        <SelectedTemplate Context="address">@address.Street @address.City @address.Province  @address.Postalcode</SelectedTemplate>
                        <ResultTemplate Context="address">@address.Street @address.City @address.Province  @address.Postalcode</ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
        </div>

        @if (selectedaddress != null)
        {
            accessRequestForm.Street = selectedaddress.Street;
            accessRequestForm.City = selectedaddress.City;
            accessRequestForm.Province = selectedaddress.Province;
            accessRequestForm.Country = selectedaddress.Country;
            accessRequestForm.Postalcode = selectedaddress.Postalcode;

            selectedaddress = null;
        }

        <div class="row">
            <div class="col-lg-2 col-md-3 col-sm-12">
                <span class="required">*</span>
                <label>
                    Street:
                </label>
                <InputText id="street" class="form-control" disabled="@IsDisabled" @bind-Value="accessRequestForm.Street" />
            </div>
            <div class="col-lg-2 col-md-3 col-sm-12">
                <span class="required">*</span>
                <label>
                    City:
                </label>
                <InputText id="city" class="form-control" disabled="@IsDisabled" @bind-Value="accessRequestForm.City" />
            </div>
            <div class="col-lg-2 col-md-3 col-sm-12">
                <span class="required">*</span>
                <label>
                    Province:
                </label>
                <InputText id="province" class="form-control" disabled="@IsDisabled" @bind-Value="accessRequestForm.Province" />
            </div>
            <div class="col-lg-2 col-md-3 col-sm-12">
                <label>
                    Country:
                </label>
                <InputText id="country" class="form-control" disabled="@IsDisabled" @bind-Value="accessRequestForm.Country" />
            </div>
            <div class="col-lg-2 col-md-3 col-sm-12">
                <label>
                    Postal Code:
                </label>
                <InputText id="postalcode" class="form-control" disabled="@IsDisabled" @bind-Value="accessRequestForm.Postalcode" />
            </div>
        </div>

        @* Requester Contact *@

        <hr />
        <h5>Applicant Contact Information</h5>
        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12">
                <span class="required">*</span>
                <label>Daytime Phone:</label>
                    <InputText id="daytimephone" class="form-control" disabled="@IsDisabled" @bind-Value="accessRequestForm.Daytimephone" />
            </div>

            <div class="col-lg-3 col-md-3 col-sm-12">
                <label>Alternate Phone:</label>
                <InputText id="alternatephone" class="form-control" disabled="@IsDisabled" @bind-Value="accessRequestForm.Alternatephone" />
            </div>

            <div class="col-lg-3 col-md-3 col-sm-12">
                <label style="font-weight:200">Fax Phone:</label>
                <InputText id="faxphone" class="form-control" disabled="@IsDisabled" @bind-Value="accessRequestForm.Faxphone" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label style="font-weight:200">Email:</label>
                <InputText id="email" class="form-control" disabled="@IsDisabled" @bind-Value="accessRequestForm.Email" />
            </div>

        </div>

        <hr />
        <h5>Subject of Request</h5>
        <div class="row h-auto">
            <div class="col-lg-6 col-md-3 col-sm-12">
                <div class="input-group ">
                    <label style="font-weight:bold;color:blue;">Search Subject of Request:</label>
                    <BlazoredTypeahead class="blazored-typeahead__clear" style="background-color:lightyellow" SearchMethod="SearchPOIPersonName" disabled="@IsDisabled" @bind-Value="POISelectedPersonName">
                        <SelectedTemplate Context="POIPersonName">@POIPersonName.firstname @POIPersonName.lastname @POIPersonName.middlename</SelectedTemplate>
                        <ResultTemplate Context="POIpersonname">@POIpersonname.firstname @POIpersonname.lastname @POIpersonname.middlename</ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
        </div>


        <br />
        @* Subject of Request Info *@

        @if (POISelectedPersonName != null)
        {
            accessRequestForm.Personofinterestfirstname = POISelectedPersonName.firstname;
            accessRequestForm.Personofinterestlastname = POISelectedPersonName.lastname;
            accessRequestForm.Personofinterestmiddlename = POISelectedPersonName.middlename;
            POISelectedPersonName = null;
        }
        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label>First Name:</label>
                <InputText id="poifirstname" class="form-control" disabled="@IsDisabled" @bind-Value="accessRequestForm.Personofinterestfirstname" />
            </div>

            <div class="col-lg-3 col-md-3 col-sm-12">
                <label>Middle Name:</label>
                <InputText id="poimiddlename" class="form-control" disabled="@IsDisabled" @bind-Value="accessRequestForm.Personofinterestmiddlename" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label>Last Name:</label>
                <InputText id="poilastname" class="form-control" disabled="@IsDisabled" @bind-Value="accessRequestForm.Personofinterestlastname" />
            </div>
        </div>


        <hr />
        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="recorddeliverymethodid">
                    Record Delivery Method:  <b>@recordDeliveryMethodDetail</b>
                </label>
                <InputSelect id="recorddeliverymethodid" class="form-select d-inline" disabled="@IsDisabled" placeholder="RECORD DELIVERY METHODID" @bind-Value="accessRequestForm.Recorddeliverymethodid">
                    <option value="-1">Select...</option>
                    @foreach (var lktype in recordDeliveryMethods)
                    {
                        <option value="@lktype.Id">@lktype.Detail</option>
                    }
                </InputSelect>
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <span class="required">*</span>
                <label for="analystassignedid">
                    Analyst Assigned:  <b>@analystAssignedName</b>
                </label>
                <InputSelect id="analystassignedid" class="form-select d-inline" disabled="@IsDisabled" placeholder="ANALYST ASSIGNED" @bind-Value="accessRequestForm.Analystassignedid">
                    <option value="">Select...</option>
                    @foreach (var lktype in analysts)
                    {
                        <option value="@lktype.Id">@lktype.Displayname</option>
                    }
                </InputSelect>
            </div>
            <div class="col-lg-5 col-md-3 col-sm-12">
                <label for="previousrequests">
                    Previous Requests:
                </label>
                <InputText id="previousrequests" class="form-control" disabled="@IsDisabled" placeholder="PREVIOUS REQUESTS" @bind-Value="accessRequestForm.Previousrequests" />
            </div>

            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="timeframe">
                    Time Frame:
                </label>
                <InputText id="timeframe" class="form-control" disabled="@IsDisabled" placeholder="TIME FRAME" @bind-Value="accessRequestForm.Timeframe" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="requeststate">
                    Request State:  <b>@requestStateDetail</b>
                </label>


                <InputSelect id="requeststate" class="form-select d-inline" disabled="@IsDisabled" placeholder="REQUEST STATE" @bind-Value="accessRequestForm.Requeststate" @bind-Value:after="setClosedDateIfStatusIsClosed">
                    @* make request state default to Active *@
                    <option value="2" selected>Active</option>
                    @foreach (var lktype in requestStates)
                    {
                        <option value="@lktype.Id">@lktype.Detail</option>
                    }
                </InputSelect>
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="closedate">
                    Close Date:
                </label>
                <InputDate id="closedate" class="form-control" disabled="@IsDisabled" placeholder="CLOSE DATE" @bind-Value="accessRequestForm.Closedate" />
            </div>
            <div class="col-lg-6 col-md-3 col-sm-12">
                <span class="required">*</span>
                <label for="requestdetails">
                    Request Details:
                </label>

                <InputTextArea id="requestdetails" class="form-control" disabled="@IsDisabled" placeholder="REQUEST DETAILS" @bind-Value="accessRequestForm.Requestdetails" row="15" col="150" style="min-height: 130px; overflow:auto;">
                    @((MarkupString)accessRequestForm.Requestdetails)
                </InputTextArea>
            </div>
            <div class="col-lg-6 col-md-3 col-sm-12">
                <label for="intakenotes">
                    Intake Notes:
                </label>
                <InputTextArea id="intakenotes" class="form-control" disabled="@IsDisabled" placeholder="INTAKE NOTES" @bind-Value="accessRequestForm.Intakenotes" row="15" col="150" style="min-height: 130px; overflow:auto;" />
            </div>
        </div>
    </div>


    <hr />


    @if (tester)
    {
        <button type="button" class="btn btn-primary" @onclick="FillData">Fill Data</button>
    }
    &nbsp;
    <button type="button" class="btn btn-primary" @onclick="ClearData">Add New</button>
    <button type="submit" class="btn btn-primary" disabled="@(IsDisabled || saving)">Save</button>
    &nbsp;
    @if (IsDisabled)
    {

        <button type="button" class="btn btn-primary" disabled="@((IsDisabled == true ? false : true) || saving)" @onclick="ActivateFile">Activate</button>
    }
</EditForm>








