@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider authenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@using Gatekeeper.Models.MenuInfo

@inject LoginState loginState
@implements IDisposable


@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager navigationManager

<div class="text-center" style="max-height:200px; max-width:200px;">
    <img src="crest-cps.svg" class="rounded mx-auto d-block" />
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    @if (canAccess)
    {
        <nav class="flex-column">
            <div class="nav-item px-2">
                <Button class="nav-link" @onclick="@(() => navigate("/mytasks/search"))" href="#" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> My Tasks
                </Button>
            </div>
            @if (adminrole)
            {
            <div class="nav-item px-2">
                <Button class="nav-link" @onclick="@(() => navigate("/accessrequests/search"))">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Access Request
                </Button>
            </div>
                <div class="nav-item px-2">
                    <Button class="nav-link" @onclick="@(() => navigate("/analyst/add"))" href="#">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Analysts
                    </Button>
                </div>
                <div class="nav-item px-2">
                    <Button class="nav-link" @onclick="@(() => navigate("/lkcity/add"))" href="#">

                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Cities
                    </Button>
                </div>

                <div class="nav-item px-2">
                    <Button class="nav-link" @onclick="@(() => navigate("/holiday/add"))" href="#">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Holidays
                    </Button>
                </div>
                <div class="nav-item px-2">
                    <Button class="nav-link" @onclick="@(() => navigate("/lklocation/add"))" href="#">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Locations Searched
                    </Button>
                </div>

                <div class="nav-item px-2">
                    <Button class="nav-link" @onclick="@(() => navigate("/lkpaymenttype/add"))" href="#">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Payment Types
                    </Button>
                </div>

                <div class="nav-item px-2">
                    <Button class="nav-link" @onclick="@(() => navigate("/processingDeficiency/add"))" href="#">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Processing Deficiency
                    </Button>
                </div>
                <div class="nav-item px-2">
                    <Button class="nav-link" @onclick="@(() => navigate("/requesttype/add"))" href="#">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Request Types
                    </Button>
                </div>
                <div class="nav-item px-2">
                    <Button class="nav-link" @onclick="@(() => navigate("/reviewtype/add"))" href="#">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Review Types
                    </Button>
                </div>

                <div class="nav-item px-2">
                    <Button class="nav-link" @onclick="@(() => navigate("/lkrecorddeliverymethod/add"))" href="#">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Record Delivery Methods
                    </Button>
                </div>

                <div class="nav-item px-2">
                    <Button class="nav-link" @onclick="@(() => navigate("/lkrequeststate/add"))" href="#">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Request States
                    </Button>
                </div>
                <div class="nav-item px-2">
                    <Button class="nav-link" @onclick="@(() => navigate("/lksection/add"))" href="#">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Sections
                    </Button>
                </div>
            }
        </nav>
    }
</div>

@code {
    private bool canAccess = false;
    private bool adminrole = false;
    public List<Analyst>? analysts { get; set; } = new List<Analyst>();
    private string? userReg;
    public SelectedmenuInfo? selmenu;

    protected async override Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        loginState.OnChange += StateHasChanged;

        var authState = await authenticationProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var nameUser = user.Identity?.Name;
        userReg = user.Identity?.Name.ToString().ToUpper().Replace("CPSENTERPRISE\\", "");
        analysts = await context.Analysts.Where(x => x.Regno.Contains(userReg) && !x.Status.Contains("del")).ToListAsync();

        if (analysts.Count > 0)
        {
            canAccess = true;
            if (string.IsNullOrEmpty(analysts.FirstOrDefault().Role.ToLower()) )
            {
                adminrole = false;
            }
            else
            {
                adminrole = true;
            }
        }
        else
        {
            canAccess = false;
        }
    }

    public async void ShowMenu()
    {
        selmenu = new SelectedmenuInfo();
        selmenu.Name = "Access Request";

        await sessionStorage.SetItemAsync("SessionSelectedMenu", selmenu);
        await JSRuntime.InvokeVoidAsync("showTopmenu");
    }

    public void Dispose()
    {
        loginState.OnChange -= StateHasChanged;
    }


    public async void HideMenu()
    {
        await sessionStorage.ClearAsync();
        await JSRuntime.InvokeVoidAsync("hideTopmenu");
    }

    private async void navigate(string url)
    {
        var currentUrl = navigationManager.Uri;
        //any pages that have confirmation before navigation need to be added here
        if (!currentUrl.Contains("/feepayment/add"))
        {
            HideMenu();
        }
        if (url == "/accessrequests/search")
        {
            navigationManager.NavigateTo(url, true);
        } else
        {
            navigationManager.NavigateTo(url);
        }

    }

    protected override async Task OnParametersSetAsync()
    {
    }


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            // await sessionStorage.SetItemAsync("RQID", fileid);
            //await sessionStorage.SetItemAsStringAsync("SessionUser", userReg);
            //var RQID = await sessionStorage.GetItemAsync<string>("RQID");


            firstRender = false;
        }


    }
}