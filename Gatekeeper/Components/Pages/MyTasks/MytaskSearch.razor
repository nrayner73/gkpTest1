@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System
@using System.Text
@using Gatekeeper.Classes

@inject AuthenticationStateProvider authenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager

@inject IAnalystService analystservice
@inject IPersonnameService personNameService
@inject IRequestfileService requestFileService
@inject ISearchrequestfileService searchfileService

@inject LoginState loginState;
@inject AppState appState;

@page "/mytasks/search"

@code {
    #region "Variables"
    private List<string> AllOptions;
    [Parameter]
    public bool showfileid { get; set; }
    private IRequestfileService RequestfileService { get; set; }
    private Requestfile requestfile { get; set; } = new Requestfile();

    public List<Searchrequestfile>? requestfileInfos { get; set; } = new List<Searchrequestfile>();
    private Searchrequestfile fileInfo { get; set; } = new Searchrequestfile();

    private IQueryable<Searchrequestfile> searchrequestfiles;
    private IQueryable<Searchrequestfile> searchrequestfilesActive;
    private IQueryable<Searchrequestfile> searchrequestfilesOnhold;

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };
    private int pageSet = 9;
    private int localItemPerPage = 20;
    private DataTable pageTable = new DataTable();

    // QuickGrid<Searchrequestfile>? grid;
    bool showpanel = true;
    bool showyear = false;
    bool showid = false;
    string userReg = string.Empty;
    bool filtering = false;
    private Analyst useranalyst { get; set; } = new Analyst();
    #endregion

    #region Lookup Parameters
    public List<Requestfile> Requestfiles { get; set; } = new List<Requestfile>();
    public List<Analyst>? analysts { get; set; } = new List<Analyst>();
    public List<LkRequesttype>? requesttypes { get; set; } = new List<LkRequesttype>();
    public List<LkRequeststate>? requeststates { get; set; } = new List<LkRequeststate>();
    public List<PersonName>? personnames { get; set; } = new List<PersonName>();
    public List<PersonEmail>? personemails { get; set; } = new List<PersonEmail>();
    public List<PersonPhone>? personphones { get; set; } = new List<PersonPhone>();

    private PersonName personname { get; set; } = new PersonName();

    private PersonPhone personphone { get; set; } = new PersonPhone();

    private PersonEmail personemail { get; set; } = new PersonEmail();

    public List<POIName>? POIpersonnames { get; set; } = new List<POIName>();
    private POIName POIselectedpersonname;
    private POIName POIpersonname { get; set; } = new POIName();
    private double totalrecordCount { get; set; } = 0;
    private int stateActive = 0;
    private int stateOnhold= 0;
    #endregion

    #region  "Component Lifecycle"
    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var nameUser = user.Identity?.Name;
        userReg = user.Identity?.Name.ToString().ToUpper().Replace("CPSENTERPRISE\\", "");
        useranalyst = analystservice.GetAnalystsList().Where(x => x.Regno == userReg).FirstOrDefault(); 

        showid = showfileid;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("hideTopmenu");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (requesttypes.Count == 0)
        {
            using var context = DbFactory.CreateDbContext();
            analysts = await context.Analysts.ToListAsync();
            requesttypes = await context.LkRequesttypes.Where(x => x.Status != "del").OrderBy(x => x.Sortby).ToListAsync();
            requeststates = await context.LkRequeststates.Where(x => x.Status != "del").OrderBy(x => x.Sortby).ToListAsync();

            foreach (var item in requeststates)
            {
                if (item.Detail == "Active")
                {
                    stateActive= item.Id;
                    break;
                }
            }

            foreach (var item in requeststates)
            {
                if (item.Detail == "On Hold")
                {
                    stateOnhold = item.Id;
                    break;
                }
            }
        }
        LoadData();

        setPageConfig();
        setPagingbutton(0);
        setPageSetbutton(0);



    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            personnames = personNameService.GetNames();
            personemails = personNameService.GetPersonEmails();
            personphones = personNameService.GetPersonPhones();
            firstRender = false;
        }
    }

    #endregion

    #region "Methods"

    #region "Main Methods"
    private void ClearSearch()
    {
        SelectedTypes = new String[] { };
        searchrequestfiles = Enumerable.Empty<Searchrequestfile>().AsQueryable();
        fileInfo = new Searchrequestfile();
        filtering = false;

        LoadData();
    }

    private void FilterData()
    {
        // LoadData();
        filtering = true;

        if (fileInfo.Requesttypeid < 0)
        {
            fileInfo.Requesttypeid = null;
        }

        if (fileInfo.Analystassignedid < 0)
        {
            fileInfo.Analystassignedid = null;
        }

        if (fileInfo.Requeststateid < 0)
        {
            fileInfo.Requeststateid = null;
        }

        string mtype = "";
        int i = 0;
        foreach (var item in SelectedTypes)
        {
            if(item == "-1")
            {
                mtype = "";
                break;
            }

            if (i < SelectedTypes.Count() -1 )
            {
                mtype += item  +",";
            }
            else
            {
                mtype += item ;
            }

            i++;
            Console.WriteLine(item);
        }

        fileInfo.Requeststate = mtype;

        searchrequestfiles = searchfileService.GetRequestfileList(fileInfo).AsQueryable<Searchrequestfile>();

        // filter records to only those assigned to current analyst
        searchrequestfiles = searchrequestfiles.Where(x => x.Analystassignedid == useranalyst.Id).AsQueryable<Searchrequestfile>();

        requestfileInfos = searchfileService.GetRequestfileList(fileInfo).ToList();

        totalrecordCount = searchrequestfiles.Count();
    }

    private int totalPages;
    private int totalPageSet;

    private async void LoadData()
    {
        lastPageIndex = pageSet;
        if (filtering == false && (searchrequestfiles == null || searchrequestfiles.Count() == 0))
        {


            foreach (var item in fileInfo.GetType().GetProperties())
            {
                item.SetValue(fileInfo, null);
            }
            // fileInfo.Fileyear = 2023;
            fileInfo.Requeststate = stateActive.ToString();
            searchrequestfilesActive = searchfileService.GetRequestfileList(fileInfo).AsQueryable<Searchrequestfile>();

            fileInfo.Requeststate = stateOnhold.ToString();
            searchrequestfilesOnhold = searchfileService.GetRequestfileList(fileInfo).AsQueryable<Searchrequestfile>();

            searchrequestfiles = searchrequestfilesActive.Concat(searchrequestfilesOnhold);

            // filter records to only those assigned to current analyst
            searchrequestfiles = searchrequestfiles.Where(x => x.Analystassignedid == useranalyst.Id).AsQueryable<Searchrequestfile>();

            totalrecordCount = searchrequestfiles.Count();
        }

    }

    private void goToAddPage(int fileid, bool readOnly)
    {
        setSession(fileid, readOnly);
        navigationManager.NavigateTo($"/accessrequests/add/{fileid}", true);
    }

    private async Task setSession(int fileid, bool readOnly)
    {
        if (fileid > 0)
        {
            requestfile = await requestFileService.GetRequestfileById(fileid);

            await sessionStorage.SetItemAsync("RQID", requestfile.Id);
            await sessionStorage.SetItemAsync("objFileRequest", requestfile);
            await sessionStorage.SetItemAsync("ReadOnly", readOnly);

            loginState.SetLogin(await requestFileService.GetRequestfileById(requestfile.Id));
            requestfile = loginState.Requestfile;
        }
    }

    private IEnumerable<Searchrequestfile> requestfilelist = default!;

    private IEnumerable<Searchrequestfile> GetFileData()
    {
        FilterData();

        return requestfileInfos;

    }


    // Grid<Searchrequestfile> grid;

    private async Task refreshGrid()
    {
        showid = !showid;


        // await grid.RefreshDataAsync();
        // await Task.Delay(3000);
        navigationManager.NavigateTo($"/accessrequests/search/{showid}", true);

    }
    #endregion

    #region Paging Setting

    private int lastPageItems;
    private int currentPageSet;

    private bool firstPagebutton = false;
    private bool previousPagebutton = false;
    private bool previousSetbutton = false;

    private bool lastPagebutton = true;
    private bool nextPagebutton = true;
    private bool nextSetbutton = true;

    private int lastPageIndex { get; set; }
    private int firstPageIndex { get; set; } = 0;


    private async void setPageConfig()
    {
        if (totalrecordCount == 0)
        {
            LoadData();
        }
        else
        {
            pageTable = new DataTable();
            pageTable.Columns.Add("recid", typeof(int));
            pageTable.Columns.Add("pagenum", typeof(int));
            pageTable.Columns.Add("pageset", typeof(int));

            DataRow dr = null;
            int pset = 0;
            int setcount = 0;
            int pages = 0;
            for (int i = 0; i < totalrecordCount; i++)
            {
                dr = pageTable.NewRow();
                dr["recid"] = i;
                dr["pagenum"] = pages;
                dr["pageset"] = pset;

                pageTable.Rows.Add(dr);

                var x = ((pages + 1) * pagination.ItemsPerPage);

                if (i == x)
                {
                    pages = pages + 1;
                }
            }

            string columnName = "pagenum";

            // Use LINQ to query the DataTable and retrieve the maximum value from the specified column
            totalPages = pageTable.AsEnumerable()
                              .Max(row => row.Field<int>(columnName));

            DataTable dt = new DataTable();

            dt.Columns.Add("id", typeof(int));
            dt.Columns.Add("pagecount", typeof(int));
            dt.Columns.Add("pageset", typeof(int));

            for (int i = 0; i <= totalPages; i++)
            {
                dr = dt.NewRow();
                dr["id"] = i;
                // dr["pagecount"] = pset;
                dr["pagecount"] = pset;
                if (pset <= pageSet)
                {
                    dr["pageset"] = setcount;
                }
                dt.Rows.Add(dr);

                if (pset == pageSet)
                {
                    pset = 0;
                    setcount += 1;
                }
                else
                {
                    pset += 1;
                }
            }

            string cName = "id";
            foreach (DataRow rw in pageTable.Rows)
            {
                var x = dt.AsEnumerable().Where(x => x.Field<int>("id") == (int)rw["pagenum"]).Select(x => x.Field<int>("pageset")).FirstOrDefault();

                rw["pageset"] = x;
            }

            columnName = "pageset";
            totalPageSet = pageTable.AsEnumerable()
         .Max(row => row.Field<int>(columnName));
        }
    }

    private string? PageButtonClass(int pageIndex)
      => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    private string? AriaPerPageValue(int perpage)
    {
        setPageConfig();
        var x = pagination.ItemsPerPage == perpage ? "page" : null;
        if (pagination.CurrentPageIndex > pagination.LastPageIndex)
        {
            GoToPageAsync(0);
        }
        setPagingbutton(pagination.CurrentPageIndex);
        setPageSetbutton(pagination.CurrentPageIndex);
        return x;
    }

    private async Task GoToNextPageSetAsync()
    {
        if (currentPageSet <= totalPageSet)
        {
            currentPageSet += 1;
        }

        if (currentPageSet == totalPageSet)
        {
            firstPageIndex = (currentPageSet * (pageSet + 1));
            lastPageIndex = (int)totalPages;
        }
        else
        {
            firstPageIndex = (currentPageSet * (pageSet + 1));
            lastPageIndex = firstPageIndex + pageSet;
        }

        setPagingbutton(firstPageIndex);
        setPageSetbutton(firstPageIndex);
        await pagination.SetCurrentPageIndexAsync(firstPageIndex);
    }

    private async Task GoToPreviousPageSetAsync()
    {
        if (currentPageSet > 0)
        {
            currentPageSet -= 1;
        }

        if (currentPageSet == totalPageSet)
        {
            firstPageIndex = (currentPageSet * (pageSet + 1)) - 1;
            lastPageIndex = (int)totalPages;
        }
        else
        {
            firstPageIndex = (currentPageSet * (pageSet + 1));
            lastPageIndex = firstPageIndex + pageSet;
        }

        setPagingbutton(firstPageIndex);
        setPageSetbutton(firstPageIndex);
        await pagination.SetCurrentPageIndexAsync(firstPageIndex);
    }

    private int findPageSet(int pageIndex)
    {
        int pset = pageTable.AsEnumerable().Where(x => x.Field<int>("pagenum") == pageIndex).Select(x => x.Field<int>("pageset")).FirstOrDefault();
        return pset;
    }

    private async Task GoToFirstPageAsync()
    {
        currentPageSet = 0;

        firstPageIndex = 0;
        lastPageIndex = firstPageIndex + pageSet;

        firstPagebutton = false;
        previousSetbutton = false;
        previousPagebutton = false;

        nextSetbutton = true;
        nextPagebutton = true;
        lastPagebutton = true;

        await pagination.SetCurrentPageIndexAsync(firstPageIndex);
    }

    private async Task GoToLastPageAsync()
    {

        var pageIndex = pageTable.AsEnumerable().Max(row => row.Field<int>("pagenum"));
        setPagingbutton(pageIndex);
        setPageSetbutton(pageIndex);

        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private async Task GoToPreviousPageAsync(int pageIndex)
    {
        pageIndex -= 1;

        setPagingbutton(pageIndex);
        setPageSetbutton(pageIndex);
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private async Task GoToNextPageAsync(int pageIndex)
    {
        pageIndex += 1;

        setPagingbutton(pageIndex);
        setPageSetbutton(pageIndex);
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        currentPageSet = findPageSet(pageIndex);
        setPagingbutton(pageIndex);
        setPageSetbutton(pageIndex);
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private void setPagingbutton(int pageIndex)
    {
        if(pageTable != null && pageTable.Rows.Count > 0)
        {
            lastPageIndex = pageTable.AsEnumerable().Max(row => row.Field<int>("pagenum"));
        }

        if (pageIndex == 0)
        {
            previousPagebutton = false;
            firstPagebutton = false;
        }
        else
        {
            previousPagebutton = true;
            firstPagebutton = true;
        }

        if (pageIndex < lastPageIndex)
        {
            nextPagebutton = true;
            lastPagebutton = true;
        }
        else
        {
            nextPagebutton = false;
            lastPagebutton = false;
        }

    }

    private void setPageSetbutton(int pageIndex)
    {
        currentPageSet = findPageSet(pageIndex);

        if (pageTable != null && pageTable.Rows.Count > 0)
        {
            firstPageIndex = pageTable.AsEnumerable()
                .Where(x => x.Field<int>("pageset") == currentPageSet).Min(row => row.Field<int>("pagenum"));

            lastPageIndex = pageTable.AsEnumerable()
                        .Where(x => x.Field<int>("pageset") == currentPageSet).Max(row => row.Field<int>("pagenum"));
        } 

        if (totalPageSet == 0)
        {
            previousSetbutton = false;
            nextSetbutton = false;
        }
        else if (currentPageSet == totalPageSet)
        {
            previousSetbutton = true;   
            nextSetbutton = false;
        }
        else
        {
            if (currentPageSet == 0)
            {
                previousSetbutton = false;
                nextSetbutton = true;
            }
            else if (currentPageSet > 0 && currentPageSet < totalPageSet)
            {
                previousSetbutton = true;
                nextSetbutton = true;
            }
        }
    }
    #endregion

    public string[] SelectedTypes { get; set; } = new String[] { };
    private void OnSelectionChanged(ChangeEventArgs e)
    {
        SelectedTypes = (string[])e.Value;
    }
    #endregion
}

<h1>Assigned Files</h1>

<EditForm Model="@fileInfo">
    @if (showpanel)
    {
        <p id="searchpanel">
            <div class="row">
                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label>
                        File Number:
                    </label>
                    <InputText id="filenumber" class="form-control" @bind-Value="fileInfo.Filenumber" />
                </div>

                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label>
                        Reference Number:
                    </label>
                    <InputText id="referencenumber" class="form-control" @bind-Value="fileInfo.Referencenumber" />
                </div>


                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label>
                        Status Note:
                    </label>
                    <InputText id="statusnote" class="form-control" @bind-Value="fileInfo.Statusnote" />
                </div>

                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label for="lbrequesttypeid">
                        Request Type:
                    </label>
                    <InputSelect id="requesttypeid" class="form-select d-inline" placeholder="REQUEST TYPE" @bind-Value="fileInfo.Requesttypeid">
                        <option value="-1">All...</option>
                        @foreach (var lktype in requesttypes)
                        {
                            <option value="@lktype.Id">@lktype.Detail</option>
                        }
                    </InputSelect>
                </div>

                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label>
                        Request State:
                    </label>
                    <select id="requeststate" class="form-select" placeholder="REQUEST STATE" @onchange="OnSelectionChanged" multiple>
                        <option value="-1">All...</option>
                        @foreach (var lktype in requeststates)
                        {
                            <option value="@lktype.Id">@lktype.Detail</option>
                        }
                    </select>
                </div>

                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label>
                        Applicant Name:
                    </label>
                    <InputText id="applicantname" class="form-control" @bind-Value="fileInfo.Personname" />
                </div>

                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label>
                        Phone Number:
                    </label>
                    <InputText id="phonenumber" class="form-control" @bind-Value="fileInfo.Daytimephone" />
                </div>


                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label>
                        Email Address:
                    </label>
                    <InputText id="email" class="form-control" @bind-Value="fileInfo.Email" />
                </div>

                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label>
                        Subject of Request:
                    </label>
                    <InputText id="subjectofrequest" class="form-control" @bind-Value="fileInfo.PersonOfInterest" />
                </div>
                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label>
                        Request Due Date From:
                    </label>
                    <InputDate id="requestdatefrom" class="form-control" @bind-Value="fileInfo.RequestDueDateFrom" />
                </div>

                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label>
                        Request Due Date To:
                    </label>
                    <InputDate id="requestdateto" class="form-control" @bind-Value="fileInfo.RequestDueDateTo" />
                </div>

                <div class="col-lg-4 col-md-3 col-sm-12">
                    <label>
                        Request Details:
                    </label>
                    <InputText id="requestdetail" class="form-control" @bind-Value="fileInfo.Requestdetails" />
                </div>
            </div>

        </p>
        <div>
            <button class="btn btn-primary" @onclick="FilterData">Search</button>
            <button type="button" class="btn btn-outline-primary" @onclick="ClearSearch">Reset</button>
        </div>
        <hr />
    }
  
</EditForm>


<div class="container-fluid w-100 ">
    <div class="row  align-items-end" style="margin-bottom: 10px;">
        <div class="col-4">
            Show:
            <label><input type="checkbox" @bind="showid" /> Record Id</label>
            &nbsp;&nbsp;&nbsp;
            <label><input type="checkbox" @bind="showyear" /> Year</label>
            &nbsp;&nbsp;&nbsp;
            <label><input type="checkbox" @bind="showpanel" /> Search Panel</label>
        </div>


        <div class="col-8  text-end">
            <button type="button" class="btn btn-warning" @onclick="()=>goToAddPage(0, false)">Add New</button>
        </div>
    </div>



    <div class="row align-items-end" >
        <div class="col" style="padding-bottom:10px">
            Items per page:
            <select aria-current="@AriaPerPageValue(pagination.ItemsPerPage)" @bind="pagination.ItemsPerPage">
                <option>5</option>
                <option>10</option>
                <option>20</option>
                <option>50</option>
            </select>
        </div>
        <div class="col " style="padding-bottom:10px">
            Total  <span style="font-weight:bold">@totalrecordCount</span> items  &nbsp;
        </div>
        <div class="col" style="padding-bottom:10px">
            Page  <span style="font-weight:bold">@(pagination.CurrentPageIndex + 1)</span> Of <span style="font-weight:bold"> @(totalPages + 1)</span> &nbsp;
        </div>

</div>
</div>


<div class="grid" tabindex="-1">
    <QuickGrid Items="@searchrequestfiles" Pagination="@pagination" Class="bb-table table table-hover table-bordered table-striped">
        @if (showid)
        {
            <PropertyColumn Property="@(r => r.Id)" Title="Id" Sortable="true" />
        }

        @if (showyear)
        {
            <PropertyColumn Property="@(r => r.Fileyear)" Title="Year" Sortable="true" />
        }
        <PropertyColumn Property="@(r => r.Filenumber)" Title="File Number" Sortable="true" />
        <PropertyColumn Property="@(r => r.Personname)" Title="Applicant Name" Sortable="true" />
        <PropertyColumn Property="@(r => r.Statusnote)" Title="Status Note" Sortable="true" />
        <PropertyColumn Property="@(r => r.Analystassigned)" Title="Analyst" Sortable="true" />
        <PropertyColumn Property="@(r => r.Requestduedate)" Title="Request Due Date" Sortable="true" />
        <PropertyColumn Property="@(r => r.PersonOfInterest)" Title="Subject Of Request" Sortable="true" />
        <PropertyColumn Property="@(r => r.Requestdate)" Title="Request Date" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending" />
        <PropertyColumn Property="@(r => r.Requeststate)" Title="Request State" Sortable="true" />

        <TemplateColumn Title="Actions">
            <button type="button" class="btn btn-primary" @onclick="()=>goToAddPage(context.Id, true)" aria-label="View">View</button>
            <button type="button" class="btn btn-primary" @onclick="()=>goToAddPage(context.Id, false)" aria-label="Edit">Edit</button>
        </TemplateColumn>
    </QuickGrid>
</div>


<div id="navbar">
    <nav aria-label="Page navigation" b-3qssc0bm46>
        <ul class="pagination">
            <li class="page-item @(firstPagebutton   ? "" : "disabled")">
                <a class="page-link"
                    @onclick="@(() => GoToFirstPageAsync())"
                    aria-label="Firstpage">
                    <i class="bi bi-chevron-double-left"></i>
                </a>
            </li>
            <li class="page-item @(previousPagebutton ?  "": "disabled")">
                <a class="page-link"
                    @onclick="@(() => GoToPreviousPageAsync(pagination.CurrentPageIndex))"
                    aria-label="Previous">
                    <i class="bi bi-chevron-left"></i>
                </a>
            </li>
            <div class="@(previousSetbutton  ? "d-block" : "d-none")">
                <li class="page-item  @(previousSetbutton ?  "": "disabled")">
                    <a class="page-link"
                        onclick="@(() => GoToPreviousPageSetAsync())"
                        aria-label="Previoussection">
                        <i class="bi bi-three-dots"></i>
                    </a>
                </li>
            </div>
            @if (totalrecordCount > 0)
            {
                for (var pageIndex = firstPageIndex; pageIndex <= lastPageIndex; pageIndex++)
                {
                    var capturedIndex = pageIndex;
                    <li class="page-item">
                        <a @onclick="@(() => GoToPageAsync(capturedIndex))"
                            class="page-link"
                            aria-current="@AriaCurrentValue(capturedIndex)"
                            aria-label="Go to page @(pageIndex + 1)">
                                        @(pageIndex + 1)
                        </a>
                    </li>
                }
            }
            <div class="@(nextSetbutton ? "d-block" : "d-none")">
                <li class="page-item @(nextSetbutton ? "" : "disabled")">
                    <a class="page-link"
                       @onclick="@(() => GoToNextPageSetAsync())"
                       aria-label="Nextsection">
                        <i class="bi bi-three-dots"></i>
                    </a>
                </li>
            </div>
            <li class="page-item @(nextPagebutton ? "" : "disabled")">
                <a class="page-link"
                   @onclick="@(() => GoToNextPageAsync(pagination.CurrentPageIndex))"
                   aria-label="Next">
                    <i class="bi bi-chevron-right"></i>
                </a>
            </li>
            <li class="page-item  @(lastPagebutton   ? "" : "disabled")">
                <a class="page-link"
                   @onclick="@(() => GoToLastPageAsync())"
                   aria-label="Lastpage">
                    <i class="bi bi-chevron-double-right"></i>
                </a>
            </li>
        </ul>
    </nav>
</div>
<br />
