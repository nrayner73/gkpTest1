@rendermode InteractiveServer
@using System.Text
@using BlazorBootstrap
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Encodings.Web
@using Gatekeeper.Classes;
@using Gatekeeper.Models;
@using System.Xml.Linq;
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.QuickGrid

@inject IConfiguration Configuration
@inject IDbContextFactory<AppDbContext> DbFactory

@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@inject ISearchAnalystnoteService searchnoteService
@inject IAuditlogService auditlogService

@inject NavigationManager navigationManager
@inject AppState appState
@implements IDisposable
@inject LoginState loginState;

@page "/analystnotes/add/{fileid:int?}"

@code {
    #region "Variables"

    private System.Security.Claims.ClaimsPrincipal user;
    private string? userReg;
    protected string Message = string.Empty;
    protected string StatusClass = string.Empty;
    private bool Saved;
    private string savetype = string.Empty;
    private string FileNumber = string.Empty;
    private bool alertMessageShow = false;

    [Parameter]
    public int fileid { get; set; }

    [Inject]
    private IAnalystnoteService AnalystnoteService { get; set; }

    private Analystnote analystnote { get; set; } = new Analystnote();
    private Analystnote oanalystnote { get; set; } = new Analystnote();

    private List<Analystnote> analystnotes { get; set; } = new List<Analystnote>();
    private Requestfile requestfile { get; set; } = new Requestfile();
    public List<Analyst>? analysts { get; set; } = new List<Analyst>();

    //Audit
    private AuditLog auditlog = new AuditLog();

    private IQueryable<SearchAnalystNotes> searchanalystnotes;
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

    bool tester = false;
    bool showpanel = true;
    bool shownotes = true;
    bool showid = false;

    #endregion

    #region "Component Lifecycle"


    protected async override Task OnInitializedAsync()
    {
        loginState.OnChange += StateHasChanged;
        getDataContext();

    }

    public void Dispose()
    {
        loginState.OnChange -= StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        //get user information
        var authState = await authenticationProvider.GetAuthenticationStateAsync();
        user = authState.User;
        userReg = user.Identity?.Name.ToString().ToUpper().Replace("CPSENTERPRISE\\", "");

        //show-hide fill data button
        var AccessPerson = Configuration["Testers"];
        tester = false;
        if (AccessPerson.Contains(userReg))
        {
            tester = true;
        }
    }

    protected async override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            //highlight selected to menu and set enable child menu
            JSRuntime.InvokeVoidAsync("showTopmenu");
            JSRuntime.InvokeVoidAsync("activetab");
            JSRuntime.InvokeVoidAsync("changetab", "note-tab");

            //set save type
            savetype = string.Empty;
            //read data from session 
            var RQID = await sessionStorage.GetItemAsync<string>("RQID");
            if (RQID != "0" && RQID != null)
            {
                fileid = Int32.Parse(RQID);
                // get data context
                getDataContext();

                loginState.OnChange += StateHasChanged;
                // Load data to grid
                LoadData();

                // assign current date and current log on user to create date, mod date, create user and mod user
                analystnote.Createuser = userReg;
                analystnote.Moduser = userReg;

                analystnote.Enterdate = DateTime.Today;
                analystnote.Analystid = analysts.Where(x => x.Regno == userReg).FirstOrDefault().Id;
                analystnote.Requestid = fileid;
            }
            StateHasChanged();
            firstRender = false;
        }
    }

    #endregion

    #region "Methods"
    public void getDataContext()
    {
        using (var context = DbFactory.CreateDbContext())
        {
            //get analyst look up data
            analysts = context.Analysts.ToList();
            if (fileid > 0)
            {
                if (loginState.gFileId == 0 || loginState.gFileId == null)
                {
                    //set state login 
                    loginState.SetLogin(context.Requestfiles.FirstOrDefault(x => x.Id == fileid));
                }
                requestfile = loginState.Requestfile;
                FileNumber = loginState.Requestfile.Filenumber;
            }
        }
        StateHasChanged();
    }


    private void LoadData()
    {
        searchanalystnotes = searchnoteService.GetAnalystnoteList(fileid).AsQueryable<SearchAnalystNotes>();
    }

    private async Task AuditData(string act, string type)
    {
        auditlog = new AuditLog();

        auditlog.AccessDate = DateTime.Now;
        auditlog.RegNo = userReg;
        auditlog.Sdate = DateTime.Now;
        auditlog.UserName = userReg;
        auditlog.AccessSystem = "GateKeeper";
        auditlog.Activity = act;

        if (type == "update" || type == "delete")
        {
            auditlog.ActivityXml = auditlogService.GetAuditxml(oanalystnote, analystnote, act).ToString();
        }

        await auditlogService.CreateAuditlog(auditlog);
    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        Message = "There are some validation errors. Please try again.";
    }

    protected async Task HandleValidSubmit()
    {
        Saved = false;

        analystnote.Moddate = DateTime.Now;
        analystnote.Moduser = userReg;

        if (savetype == "update")
        {
            await AnalystnoteService.UpdateAnalystnote(analystnote);
            await AuditData("Update Analyst Note", "update");
        }
        else
        {
            analystnote.Createdate = DateTime.Now;
            analystnote.Createuser = userReg;
            await AnalystnoteService.CreateAnalystnote(analystnote);
            await AuditData("Create Analyst Note", "create");
        }

        StatusClass = "alert-success";
        Message = "Data updated successfully";
        alertMessageShow = true;
        await InvokeAsync(() => StateHasChanged());
        await Task.Delay(1000);

        alertMessageShow = false;
        Saved = true;
        navigationManager.NavigateTo($"/analystnotes/add/{fileid}", true);
        LoadData();
        analystnote = new Analystnote();
        StateHasChanged();
    }

    private async void UpdateData(int id)
    {
        savetype = "";
        if (id > 0)
        {
            savetype = "update";
            using (var context = DbFactory.CreateDbContext())
            {
                if (id != null && id > 0)
                {
                    analystnote = context.Analystnotes.Where(x => x.Id == id).FirstOrDefault();
                    oanalystnote = (Analystnote)context.Entry(analystnote).GetDatabaseValues().ToObject();

                    StateHasChanged();
                }
            }
        }
    }


    private ConfirmDialog dialog = default!;
    private async Task ShowConfirmationAsync(int id)
    {
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the record. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            if (id != null && id > 0)
            {
                analystnote = await AnalystnoteService.GetAnalystnoteById(id);
                await AnalystnoteService.DeleteAnalystnote(analystnote);
                AuditData("Delete Analyst Note", "delete");
            }

            StatusClass = "alert-success";
            Message = "Data deleted successfully";
            alertMessageShow = true;
            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(1000);

            alertMessageShow = false;
            Saved = true;

            navigationManager.NavigateTo($"/analystnotes/add/{fileid}", true);

            //LoadData();
            //StateHasChanged();
        }

    }

    private void ClearData()
    {
        analystnote = new Analystnote();
    }


    private void FillData()
    {
        // analystnote.Id = 1;
        analystnote.Requestid = fileid;
        analystnote.Enterdate = DateTime.Now;
        analystnote.Analystid = 1;
        analystnote.Notes = "notes";
        analystnote.Timetaken = "2.5";
        analystnote.Status = 1;
        analystnote.Supervisornotes = "supervisornotes";
        analystnote.Supervisorapproved = 1;
        analystnote.Moddate = DateTime.Now;
        analystnote.Moduser = userReg;
        analystnote.Createdate = DateTime.Now;
        analystnote.Createuser = userReg;
    }
    #endregion
}

   @if (alertMessageShow)
{
    <br />
    <div class="alert @StatusClass" style="margin-left: 50px">@Message</div>
}

<h5>Notes: </h5>

<EditForm Model="@analystnote" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbfileid">
                    File Number:
                </label>
                <input type="text" readonly id="fileid" class="form-control" value="@FileNumber" style="background-color:lightgray" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbenterdate">
                    Enter date:
                </label>
                <InputDate id="enterdate" class="form-control" placeholder="ENTERDATE" @bind-Value="analystnote.Enterdate" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbanalyst">
                    Analyst:
                </label>
                <InputSelect id="analyst" class="form-control" placeholder="ANALYST" @bind-Value="analystnote.Analystid">
                    <option value="-1">Select...</option>
                    @foreach (var lktype in analysts)
                    {
                        <option value="@lktype.Id">@lktype.Displayname</option>
                    }
                </InputSelect>
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbtimetaken">
                    Timetaken:
                </label>
                <InputText id="timetaken" class="form-control" placeholder="TIMETAKEN" @bind-Value="analystnote.Timetaken" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbstatus">
                    Status:
                </label>
                <InputSelect id="status" class="form-control" placeholder="STATUS" @bind-Value="analystnote.Status">
                    <option value="-1">Select...</option>
                    <option value="0">Active</option>
                    <option value="1">Request for Review</option>
                    <option value="2">Closed</option>
                </InputSelect>
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbnotes">
                    Notes:
                </label>
                <InputTextArea id="notes" class="form-control" placeholder="NOTES" @bind-Value="analystnote.Notes" row="15" col="150" style="min-height: 130px; overflow:auto;" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbsupervisornotes">
                    Supervisor Notes:
                </label>
                <InputTextArea id="supervisornotes" class="form-control" placeholder="SUPERVISOR NOTES" @bind-Value="analystnote.Supervisornotes" row="15" col="150" style="min-height: 130px; overflow:auto;" />
            </div>
        </div>
    </div>

    <br />

    @if (tester)
    {
        <button type="button" class="btn btn-primary" @onclick="FillData">Fill Data</button>

    }
    <button type="button" class="btn btn-primary" @onclick="ClearData">Add New</button>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

<br />

<div class="row" style="width:100%;padding-bottom: 1em;">
    <div class="col-lg-5" style="float:left">
        Show:
        <label><input type="checkbox" @bind="showid" /> Record Id</label>
        &nbsp;&nbsp;&nbsp;
        <label><input type="checkbox" @bind="shownotes" /> Notes</label>
    </div>
    <div class="col-lg-5" style="float:left">
        <div class="page-size-chooser">
            Items per page:
            <select @bind="@pagination.ItemsPerPage">
                <option>3</option>
                <option>5</option>
                <option>10</option>
            </select>
        </div>
    </div>
    <div class="col-lg-2" style="float:revert">
        <div class="page-size-chooser">
        </div>
    </div>
</div>

<ConfirmDialog @ref="dialog" />

<div class="grid" tabindex="-1">
    <QuickGrid  Items="@searchanalystnotes" Virtualize="true" Pagination="@pagination">
        @if (showid)
        {
            <PropertyColumn Property="@(r => r.Id)" Title="Id" Sortable="true" class="col-width" />
        }
        @if (shownotes)
        {
            <PropertyColumn Property="@(r => r.Notes)" Title="Notes" Sortable="true" class="col-width" />
        }
        <PropertyColumn Property="@(r => r.Timetaken)" Title="Time Taken" Sortable="true" />
        <PropertyColumn Property="@(r => r.Enterdate)" Title="Enter Date" Sortable="true" />
        <PropertyColumn Property="@(r => r.Analyst)" Title="Analyst" Sortable="true" />
        <TemplateColumn Title="Actions">
            <button type="button" class="btn btn-primary" onclick="@(()=>UpdateData(context.Id))">Edit</button>
            <button type="button" class="btn btn-primary" onclick="@(()=>ShowConfirmationAsync(context.Id))">Del</button>
        </TemplateColumn>
    </QuickGrid>
</div>

<Paginator State="@pagination" />