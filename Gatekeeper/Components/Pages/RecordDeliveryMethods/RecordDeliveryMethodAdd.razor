@rendermode InteractiveServer
@using System.Text
@using BlazorBootstrap
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Encodings.Web
@using Gatekeeper.Classes;
@using Gatekeeper.DataServices;
@using Gatekeeper.DataServices.Lookups;
@using Gatekeeper.Models;
@using System.Xml.Linq;
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.QuickGrid

@inject IConfiguration Configuration
@inject IDbContextFactory<AppDbContext> DbFactory

@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@inject ISearchLkRecordDeliveryMethodService searchlkrecorddeliverymethodservice
@inject ILkSectionService lkSectionService

@inject IAuditlogService auditlogService

@inject NavigationManager navigationManager
@inject AppState appState
@implements IDisposable
@inject LoginState loginState;

@page "/lkrecorddeliverymethod/add"

@code {
    #region "Variables"

    private System.Security.Claims.ClaimsPrincipal user;
    private string? userReg;
    protected string Message = string.Empty;
    protected string StatusClass = string.Empty;
    private bool Saved;
    private string savetype = string.Empty;
    private bool alertMessageShow = false;

    [Inject]
    private ILkRecordDeliveryMethodService lkrecorddeliverymethodservice { get; set; }

    private LkRecorddeliverymethod lkrecorddeliverymethod { get; set; } = new LkRecorddeliverymethod();
    private LkRecorddeliverymethod olkrecorddeliverymethod { get; set; } = new LkRecorddeliverymethod();

    private List<LkRecorddeliverymethod> lkrecorddeliverymethods { get; set; } = new List<LkRecorddeliverymethod>();

    //Audit
    private AuditLog auditlog = new AuditLog();

    private IQueryable<SearchLkRecordDeliveryMethod> searchlkrecorddeliverymethods;
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

    bool tester = false;
    bool showpanel = true;
    bool showid = false;

    #endregion

    #region "Component Lifecycle"


    protected async override Task OnInitializedAsync()
    {
    }

    public void Dispose()
    {
        loginState.OnChange -= StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        //get user information
        var authState = await authenticationProvider.GetAuthenticationStateAsync();
        user = authState.User;
        userReg = user.Identity?.Name.ToString().ToUpper().Replace("CPSENTERPRISE\\", "");

        //show-hide fill data button
        var AccessPerson = Configuration["Testers"];
        tester = false;
        if (AccessPerson.Contains(userReg))
        {
            tester = true;
        }
    }

    protected async override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            //set save type
            savetype = string.Empty;

            // Load data to grid
            LoadData();

            // assign current date and current log on user to create date, mod date, create user and mod user
            lkrecorddeliverymethod.Createuser = userReg;
            lkrecorddeliverymethod.Moduser = userReg;
            lkrecorddeliverymethod.Createdate = DateTime.Today;

            StateHasChanged();
            firstRender = false;
        }
    }

    #endregion

    #region "Methods"

    private void LoadData()
    {
        searchlkrecorddeliverymethods = searchlkrecorddeliverymethodservice.GetLkRecordDeliveryMethodList().AsQueryable<SearchLkRecordDeliveryMethod>();
        StateHasChanged();
    }

    private async Task AuditData(string act, string type)
    {
        auditlog = new AuditLog();

        auditlog.AccessDate = DateTime.Now;
        auditlog.RegNo = userReg;
        auditlog.Sdate = DateTime.Now;
        auditlog.UserName = userReg;
        auditlog.AccessSystem = "GateKeeper";
        auditlog.Activity = act;

        if (type == "update" || type == "delete")
        {
            auditlog.ActivityXml = auditlogService.GetAuditxml(olkrecorddeliverymethod, lkrecorddeliverymethod, act).ToString();
        }

        await auditlogService.CreateAuditlog(auditlog);
    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        Message = "There are some validation errors. Please try again.";
    }

    protected async Task HandleValidSubmit()
    {
        Saved = false;

        lkrecorddeliverymethod.Moddate = DateTime.Now;
        lkrecorddeliverymethod.Moduser = userReg;

        if (savetype == "update")
        {
            await lkrecorddeliverymethodservice.UpdateLkRecorddeliverymethod(lkrecorddeliverymethod);
            await AuditData("Update Record Delivery Method", "update");
        }
        else
        {
            lkrecorddeliverymethod.Createdate = DateTime.Now;
            lkrecorddeliverymethod.Createuser = userReg;
            await lkrecorddeliverymethodservice.CreateLkRecorddeliverymethod(lkrecorddeliverymethod);
            await AuditData("Create Record Delivery Method", "create");
        }

        StatusClass = "alert-success";
        Message = "Data updated successfully";
        alertMessageShow = true;
        await InvokeAsync(() => StateHasChanged());
        await Task.Delay(1000);

        alertMessageShow = false;
        Saved = true;
        navigationManager.NavigateTo($"/lkrecorddeliverymethod/add", true);
        LoadData();
        lkrecorddeliverymethod = new LkRecorddeliverymethod();
        StateHasChanged();
    }

    private async void UpdateData(int id)
    {
        savetype = "";
        if (id > 0)
        {
            savetype = "update";
            using (var context = DbFactory.CreateDbContext())
            {
                if (id != null && id > 0)
                {
                    lkrecorddeliverymethod = context.LkRecorddeliverymethods.Where(x => x.Id == id).FirstOrDefault();
                    olkrecorddeliverymethod = (LkRecorddeliverymethod)context.Entry(lkrecorddeliverymethod).GetDatabaseValues().ToObject();

                    StateHasChanged();
                }
            }
        }
    }


    private ConfirmDialog dialog = default!;
    private async Task ShowConfirmationAsync(int id)
    {
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the record. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            if (id != null && id > 0)
            {
                lkrecorddeliverymethod = await lkrecorddeliverymethodservice.GetLkRecorddeliverymethodById(id);
                await lkrecorddeliverymethodservice.DeleteLkRecorddeliverymethod(lkrecorddeliverymethod);
                AuditData("Delete Delivery Method", "delete");
            }

            StatusClass = "alert-success";
            Message = "Data deleted successfully";
            alertMessageShow = true;
            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(1000);

            alertMessageShow = false;
            Saved = true;

            navigationManager.NavigateTo($"/lkrecorddeliverymethod/add/", true);
        }

    }

    private void ClearData()
    {
        lkrecorddeliverymethod = new LkRecorddeliverymethod();
    }

    #endregion
}

   @if (alertMessageShow)
{
    <br />
    <div class="alert @StatusClass" style="margin-left: 50px">@Message</div>
}

<h5>Notes: </h5>

<EditForm Model="@lkrecorddeliverymethod" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container-fluid">
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-12">
                    <label for="lbRecordDeliveryMethod">
                        Record Delivery Method:
                    </label>
                    <InputText id="detail" class="form-control" placeholder="RECORD DELIVERY METHOD" @bind-Value="lkrecorddeliverymethod.Detail" />
                </div>
            </div>
        </div>
    </div>
    <br />

    <button type="button" class="btn btn-primary" @onclick="ClearData">Add New</button>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

<br />

<div class="row" style="width:100%;padding-bottom: 1em;">
    <div class="col-lg-5" style="float:left">
        Show:
        <label><input type="checkbox" @bind="showid" /> Record Id</label>
        &nbsp;&nbsp;&nbsp;
    </div>
    <div class="col-lg-5" style="float:left">
        <div class="page-size-chooser">
            Items per page:
            <select @bind="@pagination.ItemsPerPage">
                <option>3</option>
                <option>5</option>
                <option>10</option>
            </select>
        </div>
    </div>
    <div class="col-lg-2" style="float:revert">
        <div class="page-size-chooser">
        </div>
    </div>
</div>

<ConfirmDialog @ref="dialog" />

<div class="grid" tabindex="-1">
    <QuickGrid Items="@searchlkrecorddeliverymethods" Virtualize="true" Pagination="@pagination">
        @if (showid)
        {
            <PropertyColumn Property="@(r => r.Id)" Title="Id" Sortable="true" class="col-width" />
        }

        <PropertyColumn Property="@(r => r.Detail)" Title="Detail" Sortable="true" />
        <TemplateColumn Title="Actions">
            <button type="button" class="btn btn-primary" onclick="@(()=>UpdateData(context.Id))">Edit</button>
            <button type="button" class="btn btn-primary" onclick="@(()=>ShowConfirmationAsync(context.Id))">Del</button>
        </TemplateColumn>
    </QuickGrid>
</div>

<Paginator State="@pagination" />