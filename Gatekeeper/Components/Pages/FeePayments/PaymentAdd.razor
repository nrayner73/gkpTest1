@rendermode InteractiveServer
@using System.Text
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Encodings.Web
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorBootstrap
@using System.Reflection;
@using System;


@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@inject ILkPaymenttypeService paymentTypeService
@inject IAnalystService analystService
@inject IRequestfileService requestFileService
@inject IAuditlogService auditlogService
@inject NavigationManager navigationManager

@inject IDbContextFactory<AppDbContext> DbFactory

@code {
    #region "Variables"
    private System.Security.Claims.ClaimsPrincipal user;
    private string? userReg;
    protected string Message = string.Empty;
    protected string StatusClass = string.Empty;
    private bool Saved;
    [Parameter]
    public string savetype { get; set; } = string.Empty;
    private string FileNumber = string.Empty;
    private bool alertMessageShow = false;
    private bool isEditing = false;

    [Parameter]
    public int fileid { get; set; }

    //Audit
    private AuditLog auditlog = new AuditLog();

    [Inject]
    private AuthenticationStateProvider GetAuthenticationStateAsync { get; set; }

    [Inject]
    private IPaymentService PaymentService { get; set; }
    [Parameter]
    public Payment payment { get; set; } = new Payment();
    private Payment opayment { get; set; } = new Payment();
    [Parameter]
    public List<Payment> payments { get; set; } = new List<Payment>();

    private Requestfile requestfile { get; set; } = new Requestfile();
    [Parameter]
    public List<Analyst>? analysts { get; set; } = new List<Analyst>();
    [Parameter]
    public List<LkPaymenttype>? paymenttype { get; set; } = new List<LkPaymenttype>();


    #endregion


    #region "Component Lifecycle"
    protected async override Task OnInitializedAsync()
    {

    }

    protected override async Task OnParametersSetAsync()
    {

    }


    protected async override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            payment.Requestid = fileid;
            payment.Paymentdate = DateTime.Now;



            StateHasChanged();
            firstRender = false;
        }
    }
    #endregion

    #region "Methods"

    private string GetPaymentType(Payment payment)
    {
        if(payment.Paytypeid.HasValue) {
            using (var context = DbFactory.CreateDbContext())
            {
                return context.LkPaymenttypes.Where(x => x.Id == payment.Paytypeid).FirstOrDefault().Detail;
            }
        }
        else
        {
            return "";
        }
    }


    private async Task AuditData(string act, string type)
    {
        auditlog = new AuditLog();
        auditlog.AccessDate = DateTime.Now;
        auditlog.RegNo = userReg;
        auditlog.Sdate = DateTime.Now;
        auditlog.UserName = userReg;
        auditlog.AccessSystem = "GateKeeper";
        auditlog.Activity = act;
        auditlog.ActivityXml = auditlogService.GetAuditxml(opayment, payment, act).ToString();

        if (type == "update" || type == "delete")
        {
            auditlog.ActivityXml = auditlogService.GetAuditxml(opayment, payment, act).ToString();
        }

        await auditlogService.CreateAuditlog(auditlog);
    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        Message = "There are some validation errors. Please try again.";
    }

    private async void UpdateData(int id)
    {
        savetype = "";
        if (id > 0)
        {
            savetype = "update";
            payment = payments.Where(x => x.Id == id).FirstOrDefault();
            using (var context = DbFactory.CreateDbContext())
            {
                opayment = (Payment)context.Entry(payment).GetDatabaseValues().ToObject();
            }
            // GetData(id);

            if(payment != null)
            {
                await PaymentService.UpdatePayment(payment);
                await AuditData("Update Payment", "update");
                StateHasChanged();
            }

        }
    }

    private async void GetData(int id)
    {
        // if (id != null && id > 0)
        // {
        //     //opayment = await PaymentService.GetPaymentById(id);
        //     payment = payments.Where(x => x.Id == id).FirstOrDefault();
        //     //await PaymentService.GetPaymentById(id);
        //     StateHasChanged();
        // }
    }

    private ConfirmDialog dialog = default!;
    private async Task ShowConfirmationAsync(int id)
    {
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the record. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            if (id != null && id > 0)
            {
                payment = await PaymentService.GetPaymentById(id);
                await PaymentService.DeletePayment(payment);
                AuditData("Delete Payment", "delete");
            }

            StatusClass = "alert-success";
            Message = "Data deleted successfully";
            alertMessageShow = true;
            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(1000);

            alertMessageShow = false;
            Saved = true;

            navigationManager.NavigateTo($"/Feepayment/add/", true);

            // LoadData();
            StateHasChanged();
        }

    }

    private void FillData()
    {

        // payment.Id = 1;
        payment.Requestid = fileid;
        payment.Description = "description";
        payment.Paymentdate = DateTime.Now;
        payment.Paytypeid = 1;
        payment.Authorization = "authorization";
        payment.Payamount = 100;
        payment.Createdate = DateTime.Now;
        payment.Createuser = userReg;
        payment.Moddate = DateTime.Now;
        payment.Moduser = userReg;
    }

    private void EditData()
    {
        isEditing = true;
    }

    private void AddNew()
    {
        payments.Add(new Payment());
        isEditing = true;
    }

    private void AddNewWithData()
    {
        var payment = new Payment();
        payment.Requestid = fileid;
        payment.Description = "description";
        payment.Paymentdate = DateTime.Now;
        payment.Paytypeid = 1;
        payment.Authorization = "authorization";
        payment.Payamount = 100;
        payment.Createdate = DateTime.Now;
        payment.Createuser = userReg;
        payment.Moddate = DateTime.Now;
        payment.Moduser = userReg;
        payments.Add(payment);

        isEditing = true;
    }

    #endregion

}

<br />

<ConfirmDialog @ref="dialog" />
<button type="button" class="btn btn-primary" @onclick="EditData">Edit</button>
<button type="button" class="btn btn-primary" @onclick="AddNew">Add New</button>
<button type="button" class="btn btn-primary" @onclick="AddNewWithData">Add New With Filled Data</button>
<table class="table table-striped">
    <thead class="table-warning">
        <tr>
            <th scope="col">Payment Description</th>
            <th scope="col">Payment Date</th>
            <th scope="col">Pay Type</th>
            <th scope="col">Authorization</th>
            <th scope="col">Pay Amount</th>
            <th scope="col">Action</th>
        </tr>
    </thead>
    <tbody>
        @if (payments != null)
        {
            if (isEditing)
            {
                @foreach (var item in payments)
                {
                    @if (item != null)
                    {
                        <tr>
                            <td>
                                <InputText id="description" class="form-control" placeholder="DESCRIPTION" @bind-Value="@item.Description" />
                            </td>
                            <td>
                                <InputDate id="paymentdate" class="form-control" placeholder="PAYMENT DATE" @bind-Value="@item.Paymentdate" />
                            </td>
                            <td>
                                <InputSelect id="paytypeid" class="form-control" placeholder="PAY TYPE" @bind-Value="@item.Paytypeid">
                                    <option value="-1">Select...</option>
                                    @foreach (var lktype in paymenttype)
                                    {
                                        <option value="@lktype.Id">@lktype.Detail</option>
                                    }
                                </InputSelect>
                            </td>
                            <td>
                                <InputText id="authorization" class="form-control" placeholder="AUTHORIZATION" @bind-Value="@item.Authorization" />
                            </td>
                            <td>
                                <InputNumber id="payamount" class="form-control" placeholder="PAY AMOUNT" @bind-Value="@item.Payamount" />
                                </td>
                            <td>
                                <button type="button" class="btn btn-primary" onclick="@(()=>ShowConfirmationAsync(item.Id))">Del</button>
                            </td>
                        </tr>
                    }
                }
            }
            else
            {
                @foreach (var item in payments)
                {
                    @if (item != null)
                    {
                        var PayTypeName = GetPaymentType(item);
                        <tr>
                            <td>@item.Description</td>
                            <td>@item.Paymentdate</td>
                            <td>@PayTypeName</td>
                            <td>@item.Authorization</td>
                            <td>@item.Payamount</td>
                            <td>
                                <button type="button" class="btn btn-primary" onclick="@(()=>ShowConfirmationAsync(item.Id))">Del</button>
                            </td>
                        </tr>
                    }
                }
            }

        }
        else
        {
            <tr>
                <td>  </td>
                <td>  </td>
            </tr>
        }
    </tbody>
</table>




