@rendermode InteractiveServer
@using System.Text
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Encodings.Web
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.QuickGrid

@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@using BlazorBootstrap

@inject IServiceScopeFactory serviceScopeFactory
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IAuditlogService auditlogService
@inject IDiscloseditemsService discloseditemsService

@inject NavigationManager navigationManager
@inject IConfiguration Configuration
@inject AppState appState
@implements IDisposable
@inject LoginState loginState;


@page "/disclosure/add/{fileid:int?}"

@code {

    #region "Variables"
    private System.Security.Claims.ClaimsPrincipal user;
    private string? userReg;
    protected string Message = string.Empty;
    protected string StatusClass = string.Empty;
    private bool Saved;
    private string savetype = string.Empty;
    private string FileNumber = string.Empty;
    private bool alertMessageShow = false;

    [Parameter]
    public int fileid { get; set; }

    //Audit
    private AuditLog auditlog = new AuditLog();

    [Inject]
    private AuthenticationStateProvider GetAuthenticationStateAsync { get; set; }

    [Inject]
    private ISummarydisclosureService SummarydisclosureService { get; set; }

    private Summarydisclosure summarydisclosure { get; set; } = new Summarydisclosure();
    private Summarydisclosure osummarydisclosure { get; set; } = new Summarydisclosure();

    private List<Summarydisclosure> summarydisclosures { get; set; } = new List<Summarydisclosure>();
    private List<Summarydisclosure> osummarydisclosures { get; set; } = new List<Summarydisclosure>();

    [Inject]
    private IDiscloseditemsService DiscloseditemService { get; set; }

    [Inject]
    private ILocationitemsService LocationitemsService { get; set; }


    private List<LkSection> sectionlist { get; set; } = new List<LkSection>();
    private List<LkLocationsearch> locationlist { get; set; } = new List<LkLocationsearch>();

    private List<DisclosedViewitem> disclosedViewData { get; set; } = new List<DisclosedViewitem>();
    private List<LocationViewitem> locationViewData { get; set; } = new List<LocationViewitem>();

    private List<Discloseditem> discloseditemsData { get; set; } = new List<Discloseditem>();
    private List<Discloseditem> odiscloseditemsData { get; set; } = new List<Discloseditem>();

    private List<Locationitem> locationitemData { get; set; } = new List<Locationitem>();
    private List<Locationitem> olocationitemData { get; set; } = new List<Locationitem>();

    private Requestfile requestfile { get; set; } = new Requestfile();
    public List<Analyst>? analysts { get; set; } = new List<Analyst>();

    private string otherTextData = string.Empty;

    private bool tester = false;

    protected bool IsDisabled { get; set; } = false;

    #endregion

    #region "Component Lifecycle"
    protected async override Task OnInitializedAsync()
    {
        loginState.OnChange += StateHasChanged;
        getDataContext();
    }


    public void Dispose()
    {
        loginState.OnChange -= StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        //get user information
        var authState = await authenticationProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userReg = user.Identity?.Name.ToString().ToUpper().Replace("CPSENTERPRISE\\", "");

        //show-hide fill data button
        var AccessPerson = Configuration["Testers"];
        tester = false;
        if (AccessPerson.Contains(userReg))
        {
            tester = true;
        }
    }

    protected async override void OnAfterRender(bool firstRender)
    {

        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            //highlight selected to menu and set enable child menu
            JSRuntime.InvokeVoidAsync("showTopmenu");
            JSRuntime.InvokeVoidAsync("activetab");
            JSRuntime.InvokeVoidAsync("changetab", "disclosure-tab");

            var ReadOnly = await sessionStorage.GetItemAsync<bool>("ReadOnly");
            if (ReadOnly == true)
            {
                IsDisabled = true;
            }

            //set save type
            savetype = string.Empty;
            //read data from session
            var RQID = await sessionStorage.GetItemAsync<string>("RQID");
            if (RQID != "0" && RQID != null)
            {
                fileid = Int32.Parse(RQID);
                //get data context
                getDataContext();

            }

            StateHasChanged();
            firstRender = false;
        }
    }
    #endregion

    #region "Methods"

    public void getDataContext()
    {
        using (var context = DbFactory.CreateDbContext())
        {
            //get analyst lookup data
            analysts = context.Analysts.ToList();
            sectionlist = context.LkSections.ToList();
            locationlist = context.LkLocationsearchs.ToList();

            if (fileid > 0)
            {
                if (loginState.gFileId == 0 || loginState.gFileId == null)
                {
                    //set state login
                    loginState.SetLogin(context.Requestfiles.FirstOrDefault(x => x.Id == fileid));
                }
                requestfile = loginState.Requestfile;
                FileNumber = loginState.Requestfile.Filenumber;
                if (context.Summarydisclosures.Where(x => x.Requestid == fileid).FirstOrDefault() != null)
                {
                    summarydisclosures = context.Summarydisclosures.Where(x => x.Requestid == fileid).ToList();
                    summarydisclosure = context.Summarydisclosures.Where(x => x.Requestid == fileid).FirstOrDefault();
                }

                if (context.Locationitems.Where(x => x.Requestid == fileid).ToList().Count > 0)
                {
                    locationitemData = context.Locationitems.Where(x => x.Requestid == fileid).ToList();
                    olocationitemData = context.Locationitems.Where(x => x.Requestid == fileid).ToList();
                }

                if (context.Discloseditems.Where(x => x.Requestid == fileid).ToList().Count > 0)
                {
                    discloseditemsData = context.Discloseditems.Where(x => x.Requestid == fileid).ToList();
                    odiscloseditemsData = context.Discloseditems.Where(x => x.Requestid == fileid).ToList();
                }

                if (context.LkRequeststates.Where(x => x.Detail == "Closed" || x.Detail == "Abandoned" || x.Detail == "Withdrawn").Any(x => x.Id == requestfile.Requeststate))
                {
                    IsDisabled = true;
                }

                LoadData();
            }
        }
        StateHasChanged();
    }


    private async void ClearData()
    {
        summarydisclosure = new Summarydisclosure();
        discloseditemsData = new List<Discloseditem>();


        LoadData();
        StateHasChanged();
    }

    private void FillData()
    {
        summarydisclosure = new Summarydisclosure();
        summarydisclosure.Requestid = fileid;
        summarydisclosure.Fileclosedate = DateTime.Now;
        summarydisclosure.Pagesidentified = "100";
        summarydisclosure.Pagesdisclosed = "50";
        summarydisclosure.Videoidentified = "500";
        summarydisclosure.Videodisclosed = "300";
        summarydisclosure.Audioidentified = "1000";
        summarydisclosure.Audiodisclosed = "800";
        summarydisclosure.Remarks = "Test Data";
        summarydisclosure.Moddate = DateTime.Now;
        summarydisclosure.Moduser = userReg;
        summarydisclosure.Createdate = DateTime.Now;
        summarydisclosure.Createuser = userReg;
    }


    private void LoadData()
    {
        disclosedViewData = new List<DisclosedViewitem>();
        locationViewData = new List<LocationViewitem>();
        using (var context = DbFactory.CreateDbContext())
        {
            //load data to view + section detail
            foreach (var item in discloseditemsData)
            {
                DisclosedViewitem viewitem = new DisclosedViewitem();
                viewitem.Id = item.Id;
                viewitem.Requestid = item.Requestid;
                viewitem.Sectionid = item.Sectionid;
                viewitem.Section = context.LkSections.Where(x => x.Id == item.Sectionid).FirstOrDefault().Section;
                viewitem.Sectiontype = item.Sectiontype;
                viewitem.Othertext = item.Othertext;
                viewitem.Createdate = DateTime.Now;
                viewitem.Createuser = userReg;

                disclosedViewData.Add(viewitem);
            }

            //load location search data to view + location name
            foreach (var item in locationitemData)
            {
                LocationViewitem viewitem = new LocationViewitem();
                viewitem.Id = item.Id;
                viewitem.Requestid = (int)item.Requestid;
                viewitem.Locationid = (int)item.Locationid;
                viewitem.Locationname = context.LkLocationsearchs.Where(x => x.Id == item.Locationid).FirstOrDefault().Detail;
                viewitem.Createdate = DateTime.Now;
                viewitem.Createuser = userReg;

                locationViewData.Add(viewitem);

            }
        }

         StateHasChanged();

    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        Message = "There are some validation errors. Please try again.";
    }

    protected async Task HandleValidSubmit()
    {

        Saved = false;

        //check list data testing
        summarydisclosure.Moddate = DateTime.Now;
        summarydisclosure.Moduser = userReg;

        savetype = "create";
        if (summarydisclosures.Count > 0)
        {
            savetype = "update";
        }

        if (savetype == "update")
        {
            await SummarydisclosureService.UpdateSummarydisclosure(summarydisclosure);
            await AuditData("Update Summarydisclosure", "update");
        }
        else
        {
            summarydisclosure.Createdate = DateTime.Now;
            summarydisclosure.Createuser = userReg;
            await SummarydisclosureService.CreateSummarydisclosure(summarydisclosure);
            await AuditData("Create Summarydisclosure", "create");
        }


        Discloseditem discloseditem = new Discloseditem();
        //remove disclosure items that user deleted from the list
        foreach (var item in odiscloseditemsData)
        {
            discloseditem = discloseditemsData.Where(x => x.Sectionid == item.Sectionid && x.Requestid == item.Requestid).FirstOrDefault();

            if (discloseditem == null)
            {
                await DiscloseditemService.DeleteDiscloseditems(item);
            }
        }


        //insert new disclosureitem
        foreach (var item in discloseditemsData)
        {

            Discloseditem odiscloseditem = new Discloseditem();
            odiscloseditem = await DiscloseditemService.GetDiscloseditemsBySectionId(item.Sectionid, fileid);

            //skip any section item that already exists in the table
            if (odiscloseditem == null)
            {
                item.Requestid = fileid;
                await DiscloseditemService.CreateDiscloseditems(item);
            }
        }

        Locationitem locationitem = new Locationitem();
        //remove location searvh items that user deleted from the list
        foreach (var item in olocationitemData)
        {
            locationitem = locationitemData.Where(x => x.Locationid == item.Locationid && x.Requestid == item.Requestid).FirstOrDefault();

            if (locationitem == null)
            {
                await LocationitemsService.DeleteLocationitem(item);
            }
        }

        //insert new locationitem
        foreach (var item in locationitemData)
        {
            Locationitem olocationitem = new Locationitem();
            olocationitem = await LocationitemsService.GetLocationitemByLocationId((int)item.Locationid, fileid);

            //don't insert if location data already exists
            if (olocationitem == null)
            {
                item.Requestid = fileid;
                await LocationitemsService.CreateLocationitem(item);
            }
        }

        StatusClass = "alert-success";
        Message = "Data updated successfully";
        alertMessageShow = true;
        await InvokeAsync(() => StateHasChanged());
        await Task.Delay(1000);

        alertMessageShow = false;
        Saved = true;


        navigationManager.NavigateTo($"/disclosure/add/{fileid}", true);

        // LoadData();
        //  summarydisclosure = new Summarydisclosure();
        //  StateHasChanged();
    }

    private async Task AuditData(string act, string type)
    {
        auditlog = new AuditLog();
        auditlog.AccessDate = DateTime.Now;
        auditlog.RegNo = userReg;
        auditlog.Sdate = DateTime.Now;
        auditlog.UserName = userReg;
        auditlog.AccessSystem = "GateKeeper";
        auditlog.Activity = act;
        // auditlog.ActivityXml = auditlogService.GetAuditxml(osummarydisclosure, summarydisclosure, act).ToString();


        if (type == "update" || type == "delete")
        {
            if (auditlogService.GetAuditxml(osummarydisclosure, summarydisclosure, act) != null)
            {
                auditlog.ActivityXml = auditlogService.GetAuditxml(osummarydisclosure, summarydisclosure, act).ToString();

            }

        }

        await auditlogService.CreateAuditlog(auditlog);
    }
    #endregion

}

<h1>Disclosures</h1>
<EditForm Model="@summarydisclosure" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    @if (alertMessageShow)
    {
        <br />
        <div class="alert @StatusClass" style="margin-left: 50px">@Message</div>
    }
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbfileid">
                    File Number:
                </label>
                <input type="text" readonly id="fileid" class="form-control" value="@FileNumber" style="background-color:lightgray" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbfileclosedate">
                    Date file close:
                </label>
                <InputDate id="fileclosedate" class="form-control" placeholder="FILE CLOSE DATE" max="2100-12-31" @bind-Value="summarydisclosure.Fileclosedate" disabled="@IsDisabled" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbpagesidentified">
                    Pages identified:
                </label>
                <InputText id="pagesidentified" class="form-control" placeholder="PAGES IDENTIFIED" @bind-Value="summarydisclosure.Pagesidentified" disabled="@IsDisabled" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbpagesdisclosed">
                    Pages disclosed:
                </label>
                <InputText id="pagesdisclosed" class="form-control" placeholder="PAGES DISCLOSED" @bind-Value="summarydisclosure.Pagesdisclosed" disabled="@IsDisabled" />
            </div>

            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbvideoidentified">
                    Video identified:
                </label>
                <InputText id="videoidentified" class="form-control" placeholder="VIDEO IDENTIFIED" @bind-Value="summarydisclosure.Videoidentified" disabled="@IsDisabled" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbvideodisclosed">
                    Video disclosed:
                </label>
                <InputText id="videodisclosed" class="form-control" placeholder="VIDEO DISCLOSED" @bind-Value="summarydisclosure.Videodisclosed" disabled="@IsDisabled" />
            </div>

            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbaudioidentified">
                    Audio identified:
                </label>
                <InputText id="audioidentified" class="form-control" placeholder="AUDIO IDENTIFIED" @bind-Value="summarydisclosure.Audioidentified" disabled="@IsDisabled" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbaudiodisclosed">
                    Audio disclosed:
                </label>
                <InputText id="audiodisclosed" class="form-control" placeholder="AUDIO DISCLOSED" @bind-Value="summarydisclosure.Audiodisclosed" disabled="@IsDisabled" />
            </div>

            <div class="col-lg-8 col-md-8 col-sm-12">
                <label for="lbremarks">
                    Remarks:
                </label>
                <InputTextArea id="remarks" class="form-control" placeholder="REMARKS" @bind-Value="summarydisclosure.Remarks" disabled="@IsDisabled" row="15" col="150" style="min-height: 130px; overflow:auto;" />
            </div>
        </div>
    </div>
    <br />
    <DiscloseditemAdd userReg="@userReg" requestfile="requestfile" locationlist="locationlist" sectionlist="sectionlist" File_locationitems="locationitemData" File_discloseditems="discloseditemsData" View_locationitems="locationViewData" View_discloseditems="disclosedViewData" IsDisabled="IsDisabled"></DiscloseditemAdd>
    <br />

    
    @if (tester)
    {
        <button type="button" class="btn btn-primary" @onclick="FillData" disabled="@IsDisabled">Fill Data</button>
    }
    &nbsp;
    <button type="button" class="btn btn-primary" @onclick="ClearData" disabled="@IsDisabled">Add New</button>
    &nbsp;
    @if (!IsDisabled)
    {
        <button type="submit" class="btn btn-primary" disabled="@IsDisabled">Save</button>
    }
</EditForm>




