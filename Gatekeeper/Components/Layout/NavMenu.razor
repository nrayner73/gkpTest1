@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@using Gatekeeper.Models.MenuInfo

<div class="top-row ps-3 navbar navbar-dark" style="height:auto;margin-left:50px">
    <img src="crest-cps.svg" style="width:70%; height:70%" class="img-fluid" />
    <div class="container-fluid">
        <a class="navbar-brand" href="">
            Gatekeeper
        </a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-2">
            <NavLink class="nav-link" @onclick="HideMenu" href="/mytasks/search" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> My Tasks
            </NavLink>
        </div>

        <div class="nav-item px-2">
            <NavLink class="nav-link" @onclick="HideMenu" href="/accessrequests/search">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Access Request
            </NavLink>
        </div>
        <div class="nav-item px-2">
            <NavLink class="nav-link" @onclick="HideMenu" href="/analyst/add">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Analysts
            </NavLink>
        </div>
        <div class="nav-item px-2">
            <NavLink class="nav-link" @onclick="HideMenu" href="/holiday/add">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Holidays
            </NavLink>
        </div>

    </nav>
</div>

@code {
    public SelectedmenuInfo? selmenu;
    public async void ShowMenu()
    {
        selmenu = new SelectedmenuInfo();
        selmenu.Name = "Access Request";

        await sessionStorage.SetItemAsync("SessionSelectedMenu", selmenu);
        await JSRuntime.InvokeVoidAsync("showTopmenu");
    }

    public async void HideMenu()
    {
        await sessionStorage.ClearAsync();
        await JSRuntime.InvokeVoidAsync("hideTopmenu");
    }

    protected override async Task OnParametersSetAsync()
    {
        
     

        //ClearData();
    }


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            // await sessionStorage.SetItemAsync("RQID", fileid);
           //await sessionStorage.SetItemAsStringAsync("SessionUser", userReg);
            //var RQID = await sessionStorage.GetItemAsync<string>("RQID");


            firstRender = false;
        }


    }
}