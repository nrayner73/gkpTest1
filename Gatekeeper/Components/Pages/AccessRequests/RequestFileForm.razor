
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IPersonnameService personNameService


@code {


    [Parameter]
    public EventCallback OnCancel { get; set; }
    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }
    [Parameter]
    public Person person { get; set; }
    [Parameter]
    public Requestfile requestFile { get; set; }

    #region Lookup parameters
    public List<Analyst>? analysts { get; set; } = new List<Analyst>();
    public List<LkRequesttype>? requestTypes { get; set; } = new List<LkRequesttype>();
    public List<LkRequeststate>? requestStates { get; set; } = new List<LkRequeststate>();
    public List<LkProcessingdeficiency>? processingDeficiencies { get; set; } = new List<LkProcessingdeficiency>();
    public List<LkRecorddeliverymethod> recordDeliveryMethods { get; set; } = new List<LkRecorddeliverymethod>();
    public List<Holiday>? holidays { get; set; } = new List<Holiday>();
    public List<Holiday>? thisYearHolidays { get; set; } = new List<Holiday>();

    public List<POIName>? POIPersonNames { get; set; } = new List<POIName>();
    private POIName POISelectedPersonName;
    private POIName POIPersonName { get; set; } = new POIName();

    string? requestTypeDetail { get; set; } = null;
    string? processingDeficiencyDetail { get; set; } = null;
    string? recordDeliveryMethodDetail { get; set; } = null;
    string? analystAssignedName { get; set; } = null;
    string? requestStateDetail { get; set; } = null;

    #endregion

    protected async override Task OnInitializedAsync()
    {
        GetData(); 
        GetDataContext();
    }

    public void GetData()
    {
        using (var context = DbFactory.CreateDbContext())
        {
            int? requestTypeID = requestFile.Requesttypeid ?? null;
            if (requestTypeID.HasValue)
            {
                requestTypes = context.LkRequesttypes.ToList();
                LkRequesttype requestType = requestTypes.Where(x => x.Id == requestTypeID).FirstOrDefault();
                requestTypeDetail = requestType.Detail;
            }

            int? processingDeficiencyID = requestFile.Processingdeficiency ?? null;
            if (processingDeficiencyID.HasValue)
            {
                processingDeficiencies = context.LkProcessingdeficiencies.ToList();
                LkProcessingdeficiency processingDeficiency = processingDeficiencies.Where(x => x.Id == processingDeficiencyID).FirstOrDefault();
                processingDeficiencyDetail = processingDeficiency.Detail;
            }

            int? recordDeliveryMethodID = requestFile.Recorddeliverymethodid ?? null;
            if (recordDeliveryMethodID.HasValue)
            {
                recordDeliveryMethods = context.LkRecorddeliverymethods.ToList(); 
                LkRecorddeliverymethod recordDeliveryMethod = recordDeliveryMethods.Where(x => x.Id == recordDeliveryMethodID).FirstOrDefault();
                recordDeliveryMethodDetail = recordDeliveryMethod.Detail;
            }

            int? analystAssignedID = requestFile.Analystassignedid ?? null;
            if (analystAssignedID.HasValue)
            {
                analysts = context.Analysts.ToList(); 
                Analyst analystAssigned = analysts.Where(x => x.Id == analystAssignedID).FirstOrDefault();
                analystAssignedName = analystAssigned.Displayname;
            }

            int? requestStateID = requestFile.Requeststate ?? null;
            if (requestStateID.HasValue)
            {
                requestStates = context.LkRequeststates.ToList(); 
                LkRequeststate requestState = requestStates.Where(x => x.Id == requestStateID).FirstOrDefault();
                requestStateDetail = requestState.Detail;
                
            }
        }
    }

    public void GetDataContext()
    {
        using (var context = DbFactory.CreateDbContext())
        {
            requestTypes =  context.LkRequesttypes.ToList();
            requestTypes = requestTypes.Where(x => x.Status != "del").OrderBy(x => x.Sortby).ToList();

            processingDeficiencies = context.LkProcessingdeficiencies.ToList();
            processingDeficiencies = processingDeficiencies.Where(x => x.Status != "del").OrderBy(x => x.SortBy).ToList();

            recordDeliveryMethods =  context.LkRecorddeliverymethods.ToList();
            recordDeliveryMethods = recordDeliveryMethods.Where(x => x.Status != "del").OrderBy(x => x.Sortby).ToList();

            analysts = context.Analysts.ToList();
            analysts = analysts.Where(x => x.Status != "del").OrderBy(x => x.Sortby).ToList();

            requestStates = context.LkRequeststates.ToList();
            requestStates = requestStates.Where(x => x.Status != "del").OrderBy(x => x.Sortby).ToList();

            holidays =  context.Holidays.ToList();
            POIPersonNames = personNameService.GetPOINames();
        }
    }


    private async Task<IEnumerable<POIName>> SearchPOIPersonName(string searchText)
    {
        //filter data for Blazor Type Ahead
        return await Task.FromResult(POIPersonNames.Where(x => (x.firstname + x.lastname + x.middlename).ToLower().Contains(searchText.ToLower())));
    }

    

    public async Task setDuedate()
    {
        // var dt = e.Value;
        await Task.Delay(500);

        if (requestFile.Receivedate != null)
        {
            List<DateTime> dateRange1 = new List<DateTime>();
            List<DateTime> dateRange2 = new List<DateTime>();

            DateTime dueDate = (DateTime)requestFile.Receivedate;
            DateTime setDate;

            dueDate = ((DateTime)requestFile.Receivedate).AddDays(30);

            for (int i = 1; i < 11; i++)
            {
                setDate = dueDate.AddDays(i);
                if ((int)setDate.DayOfWeek != 0 && (int)setDate.DayOfWeek != 6)
                {
                    dateRange1.Add(setDate);
                    dateRange2.Add(setDate);
                }
            }

            //Remove holidays
            var thisYearHolidays = holidays.Where(x => ((DateTime)x.Holidaydate).Year == DateTime.Today.Year);

            foreach (var item in thisYearHolidays)
            {
                foreach (var dt in dateRange1)
                {
                    int y = dateRange1.IndexOf(dt);
                    if (dt.Date.ToString() == ((DateTime)item.Holidaydate).Date.ToString())
                    {
                        dateRange2.RemoveAt(y);
                    }
                }
            }
            requestFile.Requestduedate = dateRange2.FirstOrDefault();
        }
    }
}

<EditForm  Model="@requestFile">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbfilenumber">
                    File Number:
                </label>
                <InputText id="filenumber" class="form-control" readonly="true" placeholder="FILE NUMBER" @bind-Value="requestFile.Filenumber" style="background-color:lightgray" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
               <span class="required">*</span> <label for="lbrequestdate">
                    Request Date:
                </label>
                <InputDate id="requestdate" class="form-control" placeholder="REQUEST DATE" @bind-Value="requestFile.Requestdate" />
                <ValidationMessage For="@(() => requestFile.Requestdate)" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbreceivedate">
                    Received Date:
                </label>
                <InputDate id="receivedate" class="form-control" placeholder="RECEIVE DATE" @onblur="@setDuedate" @bind-Value="requestFile.Receivedate" @bind-Value:after="setDuedate" />
                
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbrequestduedate">
                    Request Due Date:
                </label>
                <InputDate id="requestduedate" class="form-control" readonly="true" placeholder="REQUEST DUEDATE" @bind-Value="requestFile.Requestduedate" style="background-color:lightgray" />
            </div>
        </div>

        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbreferencenumber">
                    Reference Number:
                </label>
                <InputText id="referencenumber" class="form-control" placeholder="REFERENCE NUMBER" @bind-Value="requestFile.Referencenumber" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <span class="required">*</span>
                <label for="lbidviewed">
                    ID Viewed:
                </label>
                <InputSelect id="idviewed" class="form-control" placeholder="ID VIEWED" @bind-Value="requestFile.Idviewed">
                    <option value="-1">Select...</option>
                    <option value="0">Yes</option>
                    <option value="1">No</option>
                    <option value="2">NA</option>
                </InputSelect>
                <ValidationMessage For="@(() => requestFile.Idviewed)" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <span class="required">*</span>
                <label for="lbrequesttypeid">
                    Request Type:  <b>@requestTypeDetail</b>
                </label>
                <InputSelect id="requesttypeid" class="form-control" placeholder="REQUEST TYPE" @bind-Value="requestFile.Requesttypeid">
                    <option value="-1">Select...</option>
                    @foreach (var lktype in requestTypes)
                    {
                        <option value="@lktype.Id">@lktype.Detail</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => requestFile.Requesttypeid)" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbprocessingdeficiency">
                    Processing Deficiency:  <b>@processingDeficiencyDetail</b>
                </label>
                <InputSelect id="processingdeficiency" class="form-control" placeholder="PROCESSING DEFICIENCY" @bind-Value="requestFile.Processingdeficiency">
                    <option value="-1">Select...</option>
                    @foreach (var lktype in processingDeficiencies)
                    {
                        <option value="@lktype.Id">@lktype.Detail</option>
                    }
                </InputSelect>
            </div>
        </div>

        <br />

        <hr />
        <div class="row h-auto">
            <div class="col-lg-6 col-md-3 col-sm-12">
                <div class="input-group ">
                    <label style="font-weight:bold;color:blue;">Search Subject of Request:</label>
                    <BlazoredTypeahead class="blazored-typeahead__clear" style="background-color:lightyellow" SearchMethod="SearchPOIPersonName" @bind-Value="POISelectedPersonName">
                        <SelectedTemplate Context="POIPersonName">@POIPersonName.firstname @POIPersonName.lastname @POIPersonName.middlename</SelectedTemplate>
                        <ResultTemplate Context="POIpersonname">@POIpersonname.firstname @POIpersonname.lastname @POIpersonname.middlename</ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
        </div>

        @* Subject of Request Info *@
        <br />
       
        @if (POISelectedPersonName != null)
        {
            person.Personofinterestfirstname = POISelectedPersonName.firstname;
            person.Personofinterestlastname = POISelectedPersonName.lastname;
            person.Personofinterestmiddlename = POISelectedPersonName.middlename;
            POISelectedPersonName = null;
        }
        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label>First Name:</label>
                <InputText id="poifirstname" class="form-control" @bind-Value="person.Personofinterestfirstname" />
            </div>

            <div class="col-lg-3 col-md-3 col-sm-12">
                <label>Middle Name:</label>
                <InputText id="poimiddlename" class="form-control" @bind-Value="person.Personofinterestmiddlename" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label>Last Name:</label>
                <InputText id="poilastname" class="form-control" @bind-Value="person.Personofinterestlastname" />
            </div>
        </div>

        <hr />
        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbrecorddeliverymethodid">
                    Record Delivery Method:  <b>@recordDeliveryMethodDetail</b>
                </label>
                <InputSelect id="recorddeliverymethodid" class="form-control" placeholder="RECORD DELIVERY METHODID" @bind-Value="requestFile.Recorddeliverymethodid">
                    <option value="-1">Select...</option>
                    @foreach (var lktype in recordDeliveryMethods)
                    {
                        <option value="@lktype.Id">@lktype.Detail</option>
                    }
                </InputSelect>
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <span class="required">*</span>
                <label for="lbanalystassignedid">
                    Analyst Assigned:  <b>@analystAssignedName</b>
                </label>
                <InputSelect id="analystassignedid" class="form-control" placeholder="ANALYST ASSIGNED" @bind-Value="requestFile.Analystassignedid">
                    <option value="-1">Select...</option>
                    @foreach (var lktype in analysts)
                    {
                        <option value="@lktype.Id">@lktype.Displayname</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => requestFile.Analystassignedid)" />
            </div>
            <div class="col-lg-5 col-md-3 col-sm-12">
                <label for="lbpreviousrequests">
                    Previous Requests:
                </label>
                <InputText id="previousrequests" class="form-control" placeholder="PREVIOUS REQUESTS" @bind-Value="requestFile.Previousrequests" />
            </div>

            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbtimeframe">
                    Time Frame:
                </label>
                <InputText id="timeframe" class="form-control" placeholder="TIME FRAME" @bind-Value="requestFile.Timeframe" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbrequeststate">
                    Request State:  <b>@requestStateDetail</b>
                </label>
                
                <InputSelect id="requeststate" class="form-control" placeholder="REQUEST STATE" @bind-Value="requestFile.Requeststate">
                    <option value="-1">Select...</option>
                    @foreach (var lktype in requestStates)
                    {
                        <option value="@lktype.Id">@lktype.Detail</option>
                    }
                </InputSelect>
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbclosedate">
                    Close Date:
                </label>
                <InputDate id="closedate" class="form-control" placeholder="CLOSE DATE" @bind-Value="requestFile.Closedate" />
            </div>
            <div class="col-lg-6 col-md-3 col-sm-12">
                <span class="required">*</span>
                <label for="lbrequestdetails">
                    Request Details:
                </label>
                
                <InputTextArea id="requestdetails" class="form-control" placeholder="REQUEST DETAILS" @bind-Value="requestFile.Requestdetails" row="15" col="150" style="min-height: 130px; overflow:auto;">
                    @((MarkupString)requestFile.Requestdetails)
                    </InputTextArea>
                <ValidationMessage For="@(() => requestFile.Requestdetails)" />
            </div>
            <div class="col-lg-6 col-md-3 col-sm-12">
                <label for="lbintakenotes">
                    Status Update:
                </label>
                <InputTextArea id="intakenotes" class="form-control" placeholder="STATUS UPDATE" @bind-Value="requestFile.Intakenotes" row="15" col="150" style="min-height: 130px; overflow:auto;" />
            </div>
        </div>
    </div>
</EditForm>
