@rendermode InteractiveServer
@using System.Text
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Encodings.Web
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorBootstrap
@using System.Reflection;
@using System;

@inject IViewLkPaymentTypeService ViewLkPaymentTypeService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

Service
@inject IAuditlogService auditlogService
@inject NavigationManager navigationManager

@page "/lkpaymenttype/add"


@code {
    #region "Variables"
    private System.Security.Claims.ClaimsPrincipal user;
    private string? userReg;
    protected string Message = string.Empty;
    protected string StatusClass = string.Empty;
    private bool Saved;
    private string savetype = string.Empty;
    private string FileNumber = string.Empty;
    private bool alertMessageShow = false;

    [Parameter]
    public int fileid { get; set; }

    //Audit
    private AuditLog auditlog = new AuditLog();

    [Inject]
    private AuthenticationStateProvider GetAuthenticationStateAsync { get; set; }

    [Inject]
    private ILkPaymenttypeService lkPaymenttypeService { get; set; }
    private LkPaymenttype lkPaymenttype { get; set; } = new LkPaymenttype();
    private LkPaymenttype olkPaymenttype { get; set; } = new LkPaymenttype();
    private List<LkPaymenttype> lkPaymenttypes { get; set; } = new List<LkPaymenttype>();


    //Data Grid -- Blazor QuickGrid
    private IQueryable<LkPaymentTypeView> searchlkPaymentTypes;
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

    string nameFilter;
    //int minMedals;
    //int maxMedals = 120;

    //bool showpanel = true;
    bool showid = false;
    #endregion


    #region "Component Lifecycle"
    protected async override Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity.Name;

        lkPaymenttypes = (await lkPaymenttypeService.GetLkPaymenttypeList()).ToList();
        LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userReg = user.Identity?.Name.ToString().ToUpper().Replace("CPSENTERPRISE\\", "");
    }


    protected async override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            savetype = string.Empty;
            StateHasChanged();
            firstRender = false;
        }
    }
    #endregion

    #region "Methods"

    IQueryable<LkPaymentTypeView> LkPaymentTypeView
    {
        get
        {
            var result = searchlkPaymentTypes;

            return result;
        }
    }

    private  async void LoadData()
    {
        searchlkPaymentTypes = ViewLkPaymentTypeService.GetLkPaymenttypeList().AsQueryable<LkPaymentTypeView>();
    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        Message = "There are some validation errors. Please try again.";
    }

    protected async Task HandleValidSubmit()
    {
        Saved = false;

        lkPaymenttype.Moddate = DateTime.Now;
        lkPaymenttype.Moduser = userReg;

        if (savetype == "update")
        {
            await lkPaymenttypeService.UpdateLkPaymenttype(lkPaymenttype);
            await AuditData("Update LkPaymentTypes", "update");
        }
        else
        {
            lkPaymenttype.Createdate = DateTime.Now;
            lkPaymenttype.Createuser = userReg;
            await lkPaymenttypeService.CreateLkPaymenttype(lkPaymenttype);
            await AuditData("Create LkPaymentTypes", "create");

        }

        StatusClass = "alert-success";
        Message = "Data updated successfully";
        alertMessageShow = true;
        await InvokeAsync(() => StateHasChanged());
        await Task.Delay(1000);

        alertMessageShow = false;
        Saved = true;
        navigationManager.NavigateTo($"/lkpaymenttype/add", true);
    }

    private async Task AuditData(string act, string type)
    {
        auditlog.AccessDate = DateTime.Now;
        auditlog.RegNo = userReg;
        auditlog.Sdate = DateTime.Now;
        auditlog.UserName = userReg;
        auditlog.AccessSystem = "GateKeeper";
        auditlog.Activity = act;
        auditlog.ActivityXml = auditlogService.GetAuditxml(olkPaymenttype, lkPaymenttype, act).ToString();

        if (type == "update" || type == "delete")
        {
            auditlog.ActivityXml = auditlogService.GetAuditxml(olkPaymenttype, lkPaymenttype, act).ToString();
        }

        await auditlogService.CreateAuditlog(auditlog);
    }

    private async void UpdateData(int id)
    {
        savetype = "";
        if (id > 0)
        {
            savetype = "update";
            GetData(id);
        }
    }

    private async void GetData(int id)
    {
        if (id != null && id > 0)
        {
            olkPaymenttype = await lkPaymenttypeService.GetLkPaymenttypeById(id);
            lkPaymenttype = await lkPaymenttypeService.GetLkPaymenttypeById(id);
            StateHasChanged();
        }
    }

    private ConfirmDialog dialog = default!;
    private async Task ShowConfirmationAsync(int id)
    {
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the record. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            if (id != null && id > 0)
            {
                olkPaymenttype = await lkPaymenttypeService.GetLkPaymenttypeById(id);
                await lkPaymenttypeService.DeleteLkPaymenttype(olkPaymenttype);
                AuditData("Delete LkPaymentTypes", "delete");
            }

            StatusClass = "alert-success";
            Message = "Data deleted successfully";
            alertMessageShow = true;
            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(1000);

            alertMessageShow = false;
            Saved = true;
            navigationManager.NavigateTo($"/lkpaymenttype/add", true);

            LoadData();
            StateHasChanged();
        }
        else
        {
            // do something
        }
    }

    private void ClearData()
    {
        lkPaymenttype = new LkPaymenttype();

    }

    private void FillData()
    {
        lkPaymenttype.Detail = "Payment Type Detail";
        lkPaymenttype.Createdate = DateTime.Now;
        lkPaymenttype.Createuser = userReg;
        lkPaymenttype.Status = "status";
        lkPaymenttype.Sortby = 0;
        lkPaymenttype.Moddate = DateTime.Now;
        lkPaymenttype.Moduser = userReg;
    }
    #endregion
}

@if (alertMessageShow)
{
    <br />
    <div class="alert @StatusClass" style="margin-left: 50px">@Message</div>
}

<h5>Payment Type:</h5>

<EditForm Model="@lkPaymenttype" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbPaymentType">
                    Payment Type Detail:
                </label>
                <InputText id="detail" class="form-control" placeholder="PAYMENTTYPE" @bind-Value="lkPaymenttype.Detail" />
            </div>
        </div>
    </div>

    <hr />

    @*<button type="button" class="btn btn-primary" @onclick="FillData">Fill Data</button>*@
    <button type="button" class="btn btn-primary" @onclick="ClearData">Add New</button>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

<br />

<div class="row" style="width:100%;padding-bottom: 1em;">
    <div class="col-lg-5" style="float:left">
        Show:
        <label><input type="checkbox" @bind="showid" /> ID Column</label>
    </div>
    <div class="col-lg-5" style="float:left">
        <div class="page-size-chooser">
            Items per page:
            <select @bind="@pagination.ItemsPerPage">
                <option>3</option>
                <option>5</option>
                <option>10</option>
            </select>

        </div>
    </div>
    <div class="col-lg-2" style="float:revert">
        <div class="page-size-chooser">
        </div>
    </div>
</div>

<ConfirmDialog @ref="dialog" />

<div class="grid">
    <QuickGrid Items="@LkPaymentTypeView" Virtualize="true" Pagination="@pagination">
        @if (showid)
        {
            <PropertyColumn Property="@(r => r.Id)" Title="Id" Sortable="true" />
        }
       
        <PropertyColumn Property="@(r => r.Detail)" Title="Payment Type Detail" Sortable="true" />
        <TemplateColumn Title="Actions">
            <button type="button" class="btn btn-primary" onclick="@(()=>UpdateData(context.Id))">Edit</button>
            <button type="button" class="btn btn-primary" onclick="@(()=>ShowConfirmationAsync(context.Id))">Del</button>
        </TemplateColumn>
    </QuickGrid>
</div> 

<Paginator State="@pagination" />