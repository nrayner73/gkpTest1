@rendermode InteractiveServer
@using System.Text
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Encodings.Web
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorBootstrap
@using System.Reflection;
@using System;
@inject IConfiguration Configuration
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject ISearchExtensionService searchextensionService
@inject IRequestfileService requestFileService
@inject IAuditlogService auditlogService
@inject IDateService dateService
@inject NavigationManager navigationManager

@inject AppState appState
@implements IDisposable
@inject LoginState loginState;

@page "/extension/add/{fileid:int?}"

@code {
    #region "Variables"
    private System.Security.Claims.ClaimsPrincipal user;
    private string? userReg;
    protected string Message = string.Empty;
    protected string StatusClass = string.Empty;
    private bool Saved;
    private string savetype = string.Empty;
    private string FileNumber = string.Empty;
    private bool alertMessageShow = false;
    private string? oDuedate = string.Empty;

    [Parameter]
    public int fileid { get; set; }

    //Audit
    private AuditLog auditlog = new AuditLog();

    [Inject]
    private AuthenticationStateProvider GetAuthenticationStateAsync { get; set; }

    [Inject]
    private IExtensionService ExtensionsService { get; set; }
    private Extension extension { get; set; } = new Extension();
    private Extension oextension { get; set; } = new Extension();
    private List<Extension> extensions { get; set; } = new List<Extension>();

    private Requestfile requestfile { get; set; } = new Requestfile();
    public List<Holiday>? holidays { get; set; } = new List<Holiday>();

    //Lookup
    public List<LkSection> lksectionlist { get; set; } = new List<LkSection>();
    public List<LkExtension> lkextensionlist { get; set; } = new List<LkExtension>();

    //Data Grid -- Blazor QuickGrid
    private IQueryable<SearchExtension> searchextensions;
    PaginationState pagination = new PaginationState { ItemsPerPage = 20};
    QuickGrid<Searchrequestfile>? grid;

    bool tester = false;
    bool showpanel = true;
    bool shownotes = true;
    bool showid = false;

    protected bool IsDisabled { get; set; }
    #endregion

    #region "Component Lifecycle"
    protected async override Task OnInitializedAsync()
    {
        loginState.OnChange += StateHasChanged;
        getDataContext();
    }

    public void Dispose()
    {
        loginState.OnChange -= StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        //get user information
        var authState = await authenticationProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userReg = user.Identity?.Name.ToString().ToUpper().Replace("CPSENTERPRISE\\", "");

        var AccessPerson = Configuration["Testers"];
        tester = false;
        if (AccessPerson.Contains(userReg))
        {
            tester = true;
        }
    }

    protected async override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            //highlight selected to menu and set enable child menu
            JSRuntime.InvokeVoidAsync("showTopmenu");
            JSRuntime.InvokeVoidAsync("activetab");
            JSRuntime.InvokeVoidAsync("changetab", "extension-tab");

            //set save type
            savetype = string.Empty;

            //read data from session
            var RQID = await sessionStorage.GetItemAsync<string>("RQID");

            //  var objRequest = await sessionStorage.GetItemAsync<Requestfile>("objFileRequest");
            if (RQID != "0" && RQID != null)
            {
                fileid = Int32.Parse(RQID);

                // get data context
                getDataContext();

                loginState.OnChange += StateHasChanged;
                // Load data to grid
                LoadData();

                // assign current date and current log on user to create date, mod date, create user and mod user
                extension.Createdate = DateTime.Now;
                extension.Createuser = userReg;
                extension.Moddate = DateTime.Now;
                extension.Moduser = userReg;
                extension.Requestid = fileid;
            }
            StateHasChanged();
            firstRender = false;
        }
    }
    #endregion
    #region "Methods"

    public void getDataContext()
    {
        using (var context = DbFactory.CreateDbContext())
        {
            lksectionlist = context.LkSections.Where(x => x.Sectiontype.ToLower() == "extension" && x.Status != "del").ToList();
            lkextensionlist = context.LkExtensions.Where(x => x.Status != "del").ToList();
            holidays = context.Holidays.Where(x => x.Status != "del").ToList();

            if (fileid > 0)
            {
                if (loginState.gFileId == 0 || loginState.gFileId == null)
                {
                    //set state login
                    loginState.SetLogin(context.Requestfiles.FirstOrDefault(x => x.Id == fileid));
                }
                requestfile = loginState.Requestfile;
                FileNumber = loginState.Requestfile.Filenumber;
            }

            if (context.LkRequeststates.Where(x => x.Detail == "Closed" || x.Detail == "Abandoned" || x.Detail == "Withdrawn").Any(x => x.Id == requestfile.Requeststate))
            {
                IsDisabled = true;
            }
        }
        StateHasChanged();
    }

    private void LoadData()
    {
        searchextensions = searchextensionService.GetExtensionList(fileid).AsQueryable<SearchExtension>();
    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        Message = "There are some validation errors. Please try again.";
    }

    protected async Task HandleValidSubmit()
    {
        Saved = false;

        extension.Moddate = DateTime.Now;
        extension.Moduser = userReg;

        if (savetype == "update")
        {
            await ExtensionsService.UpdateExtension(extension);
            await AuditData("Update Extensions", "update");
        }
        else
        {
            extension.Createdate = DateTime.Now;
            extension.Createuser = userReg;
            await ExtensionsService.CreateExtension(extension);
            await AuditData("Create Extensions", "create");
        }

        StatusClass = "alert-success";
        Message = "Data updated successfully";
        alertMessageShow = true;
        await InvokeAsync(() => StateHasChanged());
        await Task.Delay(1000);

        await updateRequestFileDuedate();
        // await AuditData("Update Extensions - Modify Due Date", "updateduedate");

        alertMessageShow = false;
        Saved = true;

        navigationManager.NavigateTo($"/extension/add", true);
    }

    private ConfirmDialog dialog = default!;
    private async Task ShowConfirmationAsync(int id)
    {
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the record. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            if (id != null && id > 0)
            {
                extension = await ExtensionsService.GetExtensionById(id);
                await ExtensionsService.DeleteExtension(extension);
                AuditData("Delete Extension", "delete");
            }

            StatusClass = "alert-success";
            Message = "Data deleted successfully";
            alertMessageShow = true;
            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(1000);

            await updateRequestFileDuedate();
            alertMessageShow = false;
            Saved = true;

            navigationManager.NavigateTo($"/extension/add", true);
        }
    }

    private async Task AuditData(string act, string type)
    {
        auditlog.AccessDate = DateTime.Now;
        auditlog.RegNo = userReg;
        auditlog.Sdate = DateTime.Now;
        auditlog.UserName = userReg;
        auditlog.AccessSystem = "GateKeeper";
        auditlog.Activity = act;
        auditlog.ActivityXml = auditlogService.GetAuditxml(oextension, extension, act).ToString();

        if (type == "update" || type == "delete")
        {
            auditlog.ActivityXml = auditlogService.GetAuditxml(oextension, extension, act).ToString();
        }
        else if (type == "updateduedate")
        {
            auditlog.ActivityXml = auditlogService.GetAuditxml(oDuedate, requestfile.Requestduedate.ToString(), act).ToString();

        }

        await auditlogService.CreateAuditlog(auditlog);
    }

    public async Task updateRequestFileDuedate()
    {
        if (requestfile.Receivedate != null)
        {
            extensions = (await ExtensionsService.GetExtensionList(fileid)).Where(x => x.Status != "del").ToList();
            await dateService.SetDuedate(requestfile, extensions, holidays);
            requestfile.Moddate = DateTime.Now;
            requestfile.Moduser = userReg;
            await requestFileService.UpdateRequestfile(requestfile);
        }
    }
    
    private async void UpdateData(int id)
    {
        savetype = "";
        if (id > 0)
        {
            //set save type
            savetype = "update";
            using (var context = DbFactory.CreateDbContext())
            {
                if (id != null && id > 0)
                {
                    extension = context.Extensions.Where(x => x.Id == id).FirstOrDefault();
                    oextension = (Extension)context.Entry(extension).GetDatabaseValues().ToObject();

                    StateHasChanged();
                }
            }
        }
    }


    private void ClearData()
    {
        extension = new Extension();
    }

    private void FillData()
    {
        extension.Requestid = fileid;
        extension.Extensionid = 1;
        extension.Sectionid = 72;
        extension.Extensiondate = DateTime.Now;
        extension.Dayamount = 1;
        extension.Createdate = DateTime.Now;
        extension.Createuser = userReg;
        extension.Moddate = DateTime.Now;
        extension.Moduser = userReg;
    }

    #endregion
}

@if (alertMessageShow)
{
    <br />
    <div class="alert @StatusClass" style="margin-left: 50px">@Message</div>
}

<h5>Extensions</h5>

<EditForm Model="@extension" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbfileid">
                    File Number:
                </label>
                <input type="text" readonly id="fileid" class="form-control" value="@FileNumber" style="background-color:lightgray" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbextensionid">
                    Extension:
                </label>
                <InputSelect id="extensionid" class="form-select d-inline" placeholder="EXTENSIONID" @bind-Value="extension.Extensionid" disabled="@IsDisabled">
                    <option value="-1">Select...</option>
                    @foreach (var lktype in lkextensionlist)
                    {
                        <option value="@lktype.Id">@lktype.Detail</option>
                    }
                </InputSelect>
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbsection">
                    Section:
                </label>
                <InputSelect id="section" class="form-select d-inline" placeholder="SECTION" @bind-Value="extension.Sectionid" disabled="@IsDisabled">
                    <option value="-1">Select...</option>
                    @foreach (var lktype in lksectionlist)
                    {
                        <option value="@lktype.Id">@lktype.Section</option>
                    }
                </InputSelect>
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbextensiondate">
                    Extension Date:
                </label>
                <InputDate id="extensiondate" class="form-control" placeholder="EXTENSIONDATE" @bind-Value="extension.Extensiondate" disabled="@IsDisabled" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbdayamount">
                    Number of Extension Days:
                </label>
                <InputNumber id="dayamount" class="form-control" placeholder="DAYAMOUNT" @bind-Value="extension.Dayamount" disabled="@IsDisabled" />
            </div>


        </div>
    </div>
    <hr />
    @if (tester)
    {
    <button type="button" class="btn btn-primary" @onclick="FillData" disabled="@IsDisabled">Fill Data</button>
    }
    <button type="button" class="btn btn-primary" @onclick="ClearData" disabled="@IsDisabled">Add New</button>
    @if (!IsDisabled)
    {
    <button type="submit" class="btn btn-primary" disabled="@IsDisabled">Save</button>
    }

</EditForm>

<br />

<div class="row" style="width:100%;padding-bottom: 1em;">
        <div class="col-lg-5" style="float:left">
        Show:
        <label><input type="checkbox" @bind="showid" /> Record Id</label>
     
    </div>

    <div class="col-lg-5" style="float:left">
        <div class="page-size-chooser">
            Items per page:
            <select @bind="@pagination.ItemsPerPage">
                <option>5</option>
                <option>10</option>
                <option>20</option>
            </select>

        </div>
    </div>
    <div class="col-lg-2" style="float:revert">
        <div class="page-size-chooser">
        </div>
    </div>
</div>

<ConfirmDialog @ref="dialog" />

<div class="grid" tabindex="-1">
    <QuickGrid Items="@searchextensions" Virtualize="true" Pagination="@pagination">
        @if (showid)
        {
            <PropertyColumn Property="@(r => r.Id)" Title="Id" Sortable="true" />
        }
        <PropertyColumn Property="@(r => r.Extension)" Title="Extension" Sortable="true"/>
        <PropertyColumn Property="@(r => r.Section)" Title="Section" Sortable="true" />
        <PropertyColumn Property="@(r => r.Extensiondate)" Format="yyyy/MM/dd" Title="Extension Date" Sortable="true" />
        <PropertyColumn Property="@(r => r.Dayamount)" Title="Number of Extension Days" Sortable="true" />
        <TemplateColumn Title="Actions">
            <button type="button" class="btn btn-primary" onclick="@(()=>UpdateData(context.Id))" disabled="@IsDisabled">Edit</button>
            <button type="button" class="btn btn-primary" onclick="@(()=>ShowConfirmationAsync(context.Id))" disabled="@IsDisabled">Del</button>
        </TemplateColumn>
    </QuickGrid>
</div>

<Paginator State="@pagination" />
