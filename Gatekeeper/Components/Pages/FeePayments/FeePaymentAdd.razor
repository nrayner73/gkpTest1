@rendermode InteractiveServer
@using System.Text
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Encodings.Web
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorBootstrap
@using System.Reflection;
@using System;
@using Gatekeeper.Models;

@inject IDbContextFactory<AppDbContext> DbFactory
@inject IConfiguration Configuration

@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject ISearchRequestfeeService searchrequestfeeService
@inject IAnalystsService analystService
@inject ISearchrequestfileService searchrequestFileService

@inject IAuditlogService auditlogService
@inject NavigationManager navigationManager
@implements IDisposable
@inject LoginState loginState;


@inject ILkPaymenttypeService paymentTypeService
@inject ISearchPaymentService searchpaymentService

@page "/feepayment/add/{fileid:int?}"

@code {

    #region "Variables"
    private System.Security.Claims.ClaimsPrincipal user;
    private string? userReg;
    protected string Message = string.Empty;
    protected string StatusClass = string.Empty;
    private bool Saved;
    private string savetype = string.Empty;
    private string FileNumber = string.Empty;
    private bool alertMessageShow = false;

    [Parameter]
    public int fileid { get; set; }

    //Audit
    private AuditLog auditlog = new AuditLog();

    [Inject]
    private AuthenticationStateProvider GetAuthenticationStateAsync { get; set; }

    [Inject]
    private IPaymentService PaymentService { get; set; }
    private Payment payment { get; set; } = new Payment();
    private Payment opayment { get; set; } = new Payment();
    private List<Payment> payments { get; set; } = new List<Payment>();

    private Requestfile requestfile { get; set; } = new Requestfile();

    public List<Analyst>? analysts { get; set; } = new List<Analyst>();
    public List<LkPaymenttype>? paymenttype { get; set; } = new List<LkPaymenttype>();


    [Inject]
    private IRequestfeeService RequestfeeService { get; set; }

    private Requestfee requestfee { get; set; } = new Requestfee();
    private Requestfee orequestfee { get; set; } = new Requestfee();
    private List<Requestfee> requestfees { get; set; } = new List<Requestfee>();

    [Inject]
    private IRequestfileService requestFileService { get; set; }
    private List<SearchRequestfee> searchrequestfees = new List<SearchRequestfee>();
    private List<SearchPayment> searchpayments = new List<SearchPayment>();
    private Searchrequestfile searchrequestfile { get; set; } = new Searchrequestfile();

    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

    #endregion

    #region "Component Lifecycle"
    protected async override Task OnInitializedAsync()
    {
        loginState.OnChange += StateHasChanged;
        getDataContext();

    }


    public void Dispose()
    {
        loginState.OnChange -= StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userReg = user.Identity?.Name.ToString().ToUpper().Replace("CPSENTERPRISE\\", "");

        analysts = (await analystService.GetAnalystsList()).ToList();
        paymenttype = (await paymentTypeService.GetLkPaymenttypeList()).ToList();
    }


    protected async override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            //show top menu and highlight selected menu
            JSRuntime.InvokeVoidAsync("showTopmenu");
            JSRuntime.InvokeVoidAsync("activetab");
            JSRuntime.InvokeVoidAsync("changetab", "payment-tab");


            //clear save type
            savetype = string.Empty;

            if (fileid == 0 || fileid == null)
            {
                var RQID = await sessionStorage.GetItemAsync<string>("RQID");
                if (RQID != "0" && RQID != null)
                {
                    fileid = Int32.Parse(RQID);
                    getDataContext();
                }
                loginState.OnChange += StateHasChanged;
                // Load data to grid
                LoadData();

            }

            //assign request file id and payment date
            requestfee.Requestid = fileid;
            payment.Requestid = fileid;
            payment.Paymentdate = DateTime.Now;
            payment.Createdate = DateTime.Now;
            payment.Moddate = DateTime.Now;


            StateHasChanged();
            firstRender = false;
        }
    }
    #endregion

    #region "Methods"
    //Load Data from DbContext
    public void getDataContext()
    {
        using (var context = DbFactory.CreateDbContext())
        {
            //get analyst lookup data
            analysts = context.Analysts.ToList();
            if (fileid > 0)
            {
                if (loginState.gFileId == 0 || loginState.gFileId == null)
                {
                    //set state login
                    loginState.SetLogin(context.Requestfiles.FirstOrDefault(x => x.Id == fileid));
                    loginState.OnChange += StateHasChanged;
                }
                requestfile = loginState.Requestfile;
                FileNumber = loginState.Requestfile.Filenumber;
                requestfees =  context.Requestfees.Where(x => x.Requestid == fileid).ToList();
                payments =  context.Payments.Where(x => x.Requestid == fileid).ToList();


            }
        }
        StateHasChanged();
    }


    private void LoadData()
    {

        searchrequestfees = searchrequestfeeService.GetRequestfeeList(fileid).ToList();
        searchpayments = searchpaymentService.GetPaymentList(fileid).ToList();
        StateHasChanged();
    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        Message = "There are some validation errors. Please try again.";
    }

    protected async Task HandleValidSubmit()
    {

        Saved = false;

        if (fileid > 0)
        {

            try
            {
                requestfile = await requestFileService.GetRequestfileById(fileid);

                await requestFileService.UpdateRequestfile(requestfile);
            }
            catch (Exception)
            {

                throw;
            }


            requestfee.Moddate = DateTime.Now;
            requestfee.Moduser = userReg;


            if (requestfee != null)
            {
                if (requestfee.Id == 0)
                {
                    if (requestfee.Description != "" && requestfee.Description != null)
                    {
                        requestfee.Createdate = DateTime.Now;
                        requestfee.Createuser = userReg;
                        await RequestfeeService.CreateRequestfee(requestfee);
                        await AuditData("Create Payment", "create");
                    }
                }
                else
                {

                    if (requestfee.Description != "" && requestfee.Description != null)
                    {
                        requestfee.Moddate = DateTime.Now;
                        requestfee.Moduser = userReg;
                        await RequestfeeService.UpdateRequestfee(requestfee);
                        await AuditData("Update Payment", "create");
                    }
                }
            }


            if (payment != null)
            {
                if (payment.Id == 0)
                {
                    if (payment.Description != "" && payment.Description != null)
                    {
                        payment.Createdate = DateTime.Now;
                        payment.Createuser = userReg;
                        await PaymentService.CreatePayment(payment);
                    }
                }
                else
                {
                    if (payment.Description != "" && payment.Description != null)
                    {
                        payment.Moddate = DateTime.Now;
                        payment.Moduser = userReg;
                        await PaymentService.UpdatePayment(payment);
                    }
                }
            }

            StatusClass = "alert-success";
            Message = "Data updated successfully";
            alertMessageShow = true;
            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(1000);

            alertMessageShow = false;
            Saved = true;
            // navigationManager.NavigateTo($"/Feepayment/add/{fileid}", true);
        }

        LoadData();
        requestfee = new Requestfee();
        payment = new Payment();
        StateHasChanged();
    }

    private async Task AuditData(string act, string type)
    {
        auditlog = new AuditLog();
        auditlog.AccessDate = DateTime.Now;
        auditlog.RegNo = userReg;
        auditlog.Sdate = DateTime.Now;
        auditlog.UserName = userReg;
        auditlog.AccessSystem = "GateKeeper";
        auditlog.Activity = act;
        auditlog.ActivityXml = auditlogService.GetAuditxml(orequestfee, requestfee, act).ToString();

        if (type == "update" || type == "delete")
        {
            auditlog.ActivityXml = auditlogService.GetAuditxml(orequestfee, requestfee, act).ToString();
        }

        await auditlogService.CreateAuditlog(auditlog);
    }

    private void ClearData()
    {
        requestfee = new Requestfee();
    }

    private void FillData()
    {

        // requestfee.Id = 1;
        requestfee.Requestid = fileid;
        requestfee.Description = "description";
        requestfee.Estimatedcost = 100;
        requestfee.Requested = "Yes";
        requestfee.Feewaived = "Yes";
        requestfee.Finalcost = 100;
        requestfee.Createdate = DateTime.Now;
        requestfee.Createuser = userReg;
        requestfee.Moddate = DateTime.Now;
        requestfee.Moduser = userReg;
        // requestfee.Status = "status";


        payment.Requestid = fileid;
        payment.Description = "description";
        payment.Paymentdate = DateTime.Now;
        payment.Paytypeid = 1;
        payment.Authorization = "authorization";
        payment.Payamount = 100;
        payment.Createdate = DateTime.Now;
        payment.Createuser = userReg;
        payment.Moddate = DateTime.Now;
        payment.Moduser = userReg;
        savetype = "create";
    }
    #endregion
}

@if (alertMessageShow)
{
    <br />
    <div class="alert @StatusClass" style="margin-left: 50px">@Message</div>
}

<EditForm Model="@requestfile" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">

    <RequestfeeAdd savetype=""
                   searchrequestfees="@searchrequestfees"
                   analysts="@analysts"
                   fileid="@fileid"
                   requestfile="@requestfile"
                   requestfees="@requestfees"
                   requestfee="@requestfee" />


    <PaymentAdd savetype="@savetype" searchpayments="@searchpayments" analysts="@analysts" fileid="@fileid" paymenttype="@paymenttype" payment="@payment" payments="@payments"></PaymentAdd>
    <div class="col-lg-3 col-md-3 col-sm-12">
        <label for="lbnotes">
            Notes:
        </label>
        <InputTextArea id="notes" class="form-control" placeholder="NOTES" @bind-Value="requestfile.Feepayment" row="15" col="250" style="min-height: 130px; overflow:auto;" />
    </div>
    <br />
    <button type="button" class="btn btn-primary" @onclick="FillData">Fill Data</button>
    <button type="button" class="btn btn-primary" @onclick="ClearData">Add New</button>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>
