@rendermode InteractiveServer
@using System.Text
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Encodings.Web
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorBootstrap
@using System.Reflection;
@using System;
@using Gatekeeper.Models;


@implements IDisposable;
@inject LoginState loginState;
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject ISearchRequestfeeService searchrequestfeeService
@inject IAnalystService analystService
@inject IRequestfileService requestFileService
@inject IAuditlogService auditlogService
@inject NavigationManager navigationManager

@inject IDbContextFactory<AppDbContext> DbFactory



@code {

    #region "Variables"
    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }


    private System.Security.Claims.ClaimsPrincipal user;
    private string? userReg;
    protected string Message = string.Empty;
    protected string StatusClass = string.Empty;
    private bool Saved;
    private bool isEditing = false;

    [Parameter]
    public string savetype { get; set; } = string.Empty;

    private string FileNumber = string.Empty;
    private bool alertMessageShow = false;

    [Parameter]
    public int fileid { get; set; }

    //Audit
    private AuditLog auditlog = new AuditLog();

    [Inject]
    private AuthenticationStateProvider GetAuthenticationStateAsync { get; set; }

    [Parameter]
    public List<Requestfee> requestfees { get; set; } = new List<Requestfee>();

    [Inject]
    private IRequestfeeService RequestfeeService { get; set; }

    [Parameter]
    public Requestfile requestfile { get; set; } = new Requestfile();
    private Requestfee orequestfee { get; set; } = new Requestfee();

    [Parameter]
    public List<Analyst>? analysts { get; set; } = new List<Analyst>();

    [Parameter]
    public bool IsDisabled { get; set; } = false;



    //Data Grid -- Blazor QuickGrid
    // private IQueryable<SearchRequestfee> searchrequestfees;


    // public List<SearchRequestfee> searchrequestfees { get; set; } = new List<SearchRequestfee>();
    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };




    //private GlobalSettings globalSettings = new GlobalSettings;

    #endregion


    #region "Component Lifecycle"
    protected async override Task OnInitializedAsync()
    {

    }


    protected override async Task OnParametersSetAsync()
    {
        var context = DbFactory.CreateDbContext();

        if (requestfile != null)
        {
            if (requestfile.Id > 0 && FileNumber == "")
            {

                FileNumber = requestfile.Filenumber.ToString();
            }
        }

    }

    public void Dispose()
    {
        loginState.OnChange -= StateHasChanged;
    }

    protected async override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            using var context = DbFactory.CreateDbContext();
            if (fileid == 0)
            {
                var RQID = await sessionStorage.GetItemAsync<string>("RQID");
                fileid = Int32.Parse(RQID);
                if (loginState.gFileId == 0 || loginState.gFileId == null)
                {
                    loginState.SetLogin(await context.Requestfiles.FirstOrDefaultAsync(x => x.Id == fileid));
                }
                requestfile = await context.Requestfiles.FirstOrDefaultAsync(x => x.Id == fileid);
                FileNumber = requestfile.Filenumber.ToString();
            }

            StateHasChanged();
            firstRender = false;
        }
    }
    #endregion

    #region "Methods"

    private void getDataContext()
    {
        StateHasChanged();

    }


    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        Message = "There are some validation errors. Please try again.";
    }

    private async Task AuditData(string act, string type, Requestfee changedRequestfee)
    {
        auditlog = new AuditLog();
        auditlog.AccessDate = DateTime.Now;
        auditlog.RegNo = userReg;
        auditlog.Sdate = DateTime.Now;
        auditlog.UserName = userReg;
        auditlog.AccessSystem = "GateKeeper";
        auditlog.Activity = act;
        auditlog.ActivityXml = auditlogService.GetAuditxml(orequestfee, changedRequestfee, act).ToString();

        if (type == "update" || type == "delete")
        {
            auditlog.ActivityXml = auditlogService.GetAuditxml(orequestfee, changedRequestfee, act).ToString();
        }

        await auditlogService.CreateAuditlog(auditlog);
    }

    private ConfirmDialog dialog = default!;
    private async Task ShowConfirmationAsync(Requestfee requestfee)
    {
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the record. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            if (requestfee.Id != null && requestfee.Id > 0)
            {
                // var requestfee = await RequestfeeService.GetRequestfeeById(id);
                await RequestfeeService.DeleteRequestfee(requestfee);
                AuditData("Delete Requestfee", "delete", requestfee);
            }
            requestfees.Remove(requestfee);
            StatusClass = "alert-success";
            Message = "Data deleted successfully";
            alertMessageShow = true;
            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(1000);

            alertMessageShow = false;
            Saved = true;



            // navigationManager.NavigateTo($"/Feepayment/add/", true);

        }
        else
        {
            // do something
        }
    }

    private void setfinalcost(Requestfee requestfee)
    {
        if (requestfee.Requested == "Yes" && requestfee.Feewaived == "Approved" || requestfee.Requested == "No" && requestfee.Feewaived == "NotRequested")
        {
            requestfee.Finalcost = 0;
        }
        else
        {
            requestfee.Finalcost = requestfee.Estimatedcost;
        }
        StateHasChanged();
    }

    private void EditData()
    {
        isEditing = !isEditing;
    }

    private void AddNew()
    {
        var requestFee = new Requestfee();
        requestFee.Requestid = fileid;
        if(!requestfees.Any())
        {
            requestFee.LineNumber = 1;
        } else
        {
            requestFee.LineNumber = requestfees.ToArray().Max(x => x.LineNumber) + 1;
        }
        requestfees.Add(requestFee);
        isEditing = true;
    }

    private void AddNewWithData()
    {
        var requestFee = new Requestfee();
        requestFee.Requestid = fileid;
        if (!requestfees.Any())
        {
            requestFee.LineNumber = 1;
        }
        else
        {
            requestFee.LineNumber = requestfees.ToArray().Max(x => x.LineNumber) + 1;
        }
        requestFee.Description = "description";
        requestFee.Estimatedcost = 100;
        requestFee.Requested = "Yes";
        requestFee.Feewaived = "Approved";
        requestFee.Finalcost = 0;
        requestFee.Createdate = DateTime.Now;
        requestFee.Createuser = userReg;
        requestFee.Moddate = DateTime.Now;
        requestFee.Moduser = userReg;

        requestfees.Add(requestFee);

        isEditing = true;
    }
    #endregion
}

<ConfirmDialog @ref="dialog" />
<button type="button" class="btn btn-primary" disabled="@IsDisabled" @onclick="EditData">Edit</button>
<button type="button" class="btn btn-primary" disabled="@IsDisabled" @onclick="AddNew">Add New</button>
<button type="button" class="btn btn-primary" disabled="@IsDisabled" @onclick="AddNewWithData">Add New With Filled Data</button>

<table class="table table-striped">
    <thead class="table-info">
        <tr>
            <th scope="col">Item #</th>
            <th scope="col">Description</th>
            <th scope="col">Estimated Cost</th>
            <th scope="col">Requested</th>
            <th scope="col">Fee Waived</th>
            <th scope="col">Final Cost</th>
            <th scope="col">Action</th>
        </tr>
    </thead>
    <tbody>
        @if (requestfees != null)
        {
            @if(isEditing)
            {
                @foreach (var item in requestfees)
                {
                    @if (item != null)
                    {
                        <tr>
                            <td>@item.LineNumber</td>
                            <td><InputText id="description" class="form-control" placeholder="DESCRIPTION" @bind-Value="@item.Description" /></td>
                            <td> <InputNumber id="estimatedcost" class="form-control" placeholder="ESTIMATED COST" @onchange="() => setfinalcost(item)" @onblur="() => setfinalcost(item)" @bind-Value="@item.Estimatedcost" /></td>
                            <td>
                                <InputSelect id="requested" class="form-select d-inline" placeholder="REQUESTED" @onchange="() => setfinalcost(item)" @onblur="() => setfinalcost(item)" @bind-Value="@item.Requested">
                                    <option value="">Select...</option>
                                    <option value="Yes">Yes</option>
                                    <option value="No">No</option>
                                </InputSelect>
                            </td>
                            <td>
                                <InputSelect id="feewaived" class="form-select d-inline" placeholder="FEE WAIVED" @onchange="() => setfinalcost(item)" @onblur="() => setfinalcost(item)" @bind-Value="@item.Feewaived">
                                    <option value="">Select...</option>
                                    <option value="NotRequested">Not Requested</option>
                                    <option value="Requested">Requested</option>
                                    <option value="Approved">Approved</option>
                                    <option value="Denied">Denied</option>
                                </InputSelect>
                            </td>
                            <td> <InputNumber id="finalcost" class="form-control" placeholder="FINAL COST" @bind-Value="@item.Finalcost" /></td>

                            <td>
                                <button type="button" class="btn btn-primary" onclick="@(()=>ShowConfirmationAsync(item))">Del</button>
                            </td>
                        </tr>
                    }
                }
            }
            
            else
            {
                @foreach (var item in requestfees)
                {
                    @if (item != null)
                    {
                        <tr>
                            <td>@item.LineNumber</td>
                            <td>@item.Description</td>
                            <td>@item.Estimatedcost</td>
                            <td>@item.Requested</td>
                            <td>@item.Feewaived</td>
                            <td>@item.Finalcost</td>

                            <td>
                                <button type="button" class="btn btn-primary" onclick="@(()=>ShowConfirmationAsync(item))">Del</button>
                            </td>
                        </tr>
                    }
                }
            }
            }

        else
        {
            <tr>
                <td>  </td>
                <td>  </td>
            </tr>
        }
    </tbody>
</table>
