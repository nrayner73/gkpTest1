@rendermode InteractiveServer
@using System.Text
@using BlazorBootstrap
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Encodings.Web
@using Gatekeeper.Classes;
@using Gatekeeper.DataServices;
@using Gatekeeper.DataServices.Lookups;
@using Gatekeeper.Models;
@using System.Xml.Linq;
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.QuickGrid

@inject IConfiguration Configuration
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@inject ISearchLkExtensionService searchlkextensionservice
@inject IAuditlogService auditlogService

@inject NavigationManager navigationManager
@inject AppState appState
@implements IDisposable
@inject LoginState loginState;

@page "/lkextension/add"

@code {
    #region "Variables"

    private System.Security.Claims.ClaimsPrincipal user;
    private string? userReg;
    private string savetype = string.Empty;
    private string ModalTitle = string.Empty;
    private string? SuccessMessage { get; set; }
    public List<string> AlertText = new List<string>();
    public bool DisplayAlert { get; set; }

    [Inject]
    private ILkExtensionService lkextensionservice { get; set; }

    private LkExtension lkextension { get; set; } = new LkExtension();
    private LkExtension olkextension { get; set; } = new LkExtension();

    private List<LkExtension> lkextensions { get; set; } = new List<LkExtension>();

    //Audit
    private AuditLog auditlog = new AuditLog();

    private IQueryable<SearchLkExtension> searchlkextensions;
    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    bool tester = false;
    bool showid = false;

    #endregion

    #region "Component Lifecycle"

    protected async override Task OnInitializedAsync()
    {
    }

    public void Dispose()
    {
        loginState.OnChange -= StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        //get user information
        var authState = await authenticationProvider.GetAuthenticationStateAsync();
        user = authState.User;
        userReg = user.Identity?.Name.ToString().ToUpper().Replace("CPSENTERPRISE\\", "");

        //show-hide fill data button
        var AccessPerson = Configuration["Testers"];
        tester = false;
        if (AccessPerson.Contains(userReg))
        {
            tester = true;
        }
    }

    protected async override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            //set save type
            savetype = string.Empty;

            // Load data to grid
            LoadData();

            // assign current date and current log on user to create date, mod date, create user and mod user
            lkextension.Createuser = userReg;
            lkextension.Moduser = userReg;
            lkextension.Createdate = DateTime.Today;

            StateHasChanged();
            firstRender = false;
        }
    }

    #endregion

    #region "Methods"

    private void LoadData()
    {
        searchlkextensions = searchlkextensionservice.GetLkExtensionList().AsQueryable<SearchLkExtension>();
        StateHasChanged();
    }

    private async Task ValidSubmit()
    {
        ValidateData();

        if (AlertText.Count > 0)
        {
            ModalTitle = "Data was not saved due to missing information. ";
            DisplayAlert = true;
            await OnShowModalClick();
        }
        else
        {
            ModalTitle = "Data Details";
            DisplayAlert = false;
            
            if (savetype == "update")
            {
                lkextension.Moddate = DateTime.Now;
                lkextension.Moduser = userReg;

                await lkextensionservice.UpdateLkExtension(lkextension);
                await AuditData("Update Extension", "update");
                
                SuccessMessage = "The data has been updated successfully";
            }
            else
            {
                lkextension.Createdate = DateTime.Now;
                lkextension.Createuser = userReg;
                await lkextensionservice.CreateLkExtension(lkextension);
                await AuditData("Create Extension", "create");

                SuccessMessage = "The data has been added successfully";
            }
          
            StateHasChanged();
            await OnShowModalClick();
        }
    }

    private void ValidateData()
    {
        AlertText = new List<string>();
        if (lkextension.Detail == null)
        {
            AlertText.Add("- Extension");
        }

        if (AlertText.Count > 0)
        {
            AlertText.Insert(0, "The Extension information below is required.");
        }
    }

    private async void UpdateData(int id)
    {
        savetype = "";
        if (id > 0)
        {
            savetype = "update";
            using (var context = DbFactory.CreateDbContext())
            {
                if (id != null && id > 0)
                {
                    lkextension = context.LkExtensions.Where(x => x.Id == id).FirstOrDefault();
                    olkextension = (LkExtension)context.Entry(lkextension).GetDatabaseValues().ToObject();
                    StateHasChanged();
                }
            }
        }
    }
    
    private ConfirmDialog dialog = default!;
    private async Task ShowConfirmationAsync(int id)
    {
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the record. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            if (id != null && id > 0)
            {
                lkextension = await lkextensionservice.GetLkExtensionById(id);
                await lkextensionservice.DeleteLkExtension(lkextension);
                AuditData("Delete Extension", "delete");
            }

            SuccessMessage = "Data deleted successfully";
            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(1000);
            navigationManager.NavigateTo($"/lkextension/add/", true);
        }

    }

    private async Task AuditData(string act, string type)
    {
        auditlog = new AuditLog();
        auditlog.AccessDate = DateTime.Now;
        auditlog.RegNo = userReg;
        auditlog.Sdate = DateTime.Now;
        auditlog.UserName = userReg;
        auditlog.AccessSystem = "GateKeeper";
        auditlog.Activity = act;

        if (type == "update" || type == "delete")
        {
            auditlog.ActivityXml = auditlogService.GetAuditxml(olkextension, lkextension, act).ToString();
        }
        await auditlogService.CreateAuditlog(auditlog);
    }

    private void ClearData()
    {
        lkextension = new LkExtension();
    }

    private Modal modal = default!;

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
        navigationManager.NavigateTo($"/lkextension/add/", true);
    }

    #endregion
}

<h1>Extension Types</h1>

<Modal @ref="modal" Size="ModalSize.Large">
    <HeaderTemplate>
        @if (DisplayAlert)
        {
            <h4 style="color:red">@ModalTitle</h4>
        }
        else
        {
            <h4 style="color:black">@ModalTitle</h4>

        }
    </HeaderTemplate>
    <BodyTemplate>
        @if (DisplayAlert)
        {
            @if (AlertText.Count > 0)
            {

                @foreach (var item in AlertText)
                {
                    <div style="color:red">&nbsp; @item</div>

                }
            }
        }
        else
        {
            <div style="color:green">&nbsp; @SuccessMessage</div>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
    </FooterTemplate>
</Modal>

<EditForm Model="@lkextension" OnValidSubmit="@ValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary/>
    <div class="container-fluid">
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-12">
                    <label for="lbExtension">
                        Extension Type:
                    </label>
                    <InputText id="detail" class="form-control" placeholder="EXTENSION TYPE" @bind-Value="lkextension.Detail" />
                </div>
            </div>
        </div>
    </div>
    <br />

    <button type="button" class="btn btn-primary" @onclick="ClearData">Add New</button>
    <button type="button" class="btn btn-primary" @onclick="ValidSubmit">Save</button>
</EditForm>

<br />

<div class="row" style="width:100%;padding-bottom: 1em;">
    <div class="col-lg-5" style="float:left">
        Show:
        <label><input type="checkbox" @bind="showid" /> Record Id</label>
        &nbsp;&nbsp;&nbsp;
    </div>
    <div class="col-lg-5" style="float:left">
        <div class="page-size-chooser">
            Items per page:
            <select @bind="@pagination.ItemsPerPage">
                <option>5</option>
                <option>10</option>
                <option>20</option>
            </select>
        </div>
    </div>
    <div class="col-lg-2" style="float:revert">
        <div class="page-size-chooser">
        </div>
    </div>
</div>

<ConfirmDialog @ref="dialog" />

<div class="grid" tabindex="-1">
    <QuickGrid Items="@searchlkextensions" Pagination="@pagination">
        @if (showid)
        {
            <PropertyColumn Property="@(r => r.Id)" Title="Id" Sortable="true" class="col-width" />
        }

        <PropertyColumn Property="@(r => r.Detail)" Title="Detail" Sortable="true" />
        <TemplateColumn Title="Actions">
            <button type="button" class="btn btn-primary" onclick="@(()=>UpdateData(context.Id))">Edit</button>
            <button type="button" class="btn btn-outline-primary" onclick="@(()=>ShowConfirmationAsync(context.Id))">Del</button>
        </TemplateColumn>
    </QuickGrid>
</div>

<Paginator State="@pagination" />

