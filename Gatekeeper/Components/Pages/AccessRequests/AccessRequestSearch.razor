@rendermode InteractiveServer
@using System
@using System.Text
@using Microsoft.AspNetCore.Components.QuickGrid


@inject ISearchrequestfileService searchfileService
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IPersonnameService personNameService

@inject IRequestfileService requestFileService
@inject IJSRuntime JSRuntime
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject LoginState loginState;
@inject AppState appState;

@page "/accessrequests/search"


@code {

    #region "Variables"
    private IRequestfileService RequestfileService { get; set; }
    private Requestfile requestfile { get; set; } = new Requestfile();

    public List<Searchrequestfile>? requestfileInfos { get; set; } = new List<Searchrequestfile>();
    private Searchrequestfile fileInfo { get; set; } = new Searchrequestfile();

    private IQueryable<Searchrequestfile> searchrequestfiles;
    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    QuickGrid<Searchrequestfile>? grid;
    bool showpanel = false;
    bool showyear = false;
    bool showid = false;
    #endregion

    #region Lookup Parameters
    public List<Requestfile> Requestfiles { get; set; } = new List<Requestfile>();
    public List<Analyst>? analysts { get; set; } = new List<Analyst>();
    public List<LkRequesttype>? requesttypes { get; set; } = new List<LkRequesttype>();
    public List<LkRequeststate>? requeststates { get; set; } = new List<LkRequeststate>();
    public List<PersonName>? personnames { get; set; } = new List<PersonName>();
    private PersonName selectedpersonname;
    private PersonName personname { get; set; } = new PersonName();
    public List<POIName>? POIpersonnames { get; set; } = new List<POIName>();
    private POIName POIselectedpersonname;
    private POIName POIpersonname { get; set; } = new POIName();
    #endregion

    #region  "Component Lifecycle"
    protected async override Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("hideTopmenu");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (requesttypes.Count == 0)
        {
            using var context = DbFactory.CreateDbContext();
            analysts = await context.Analysts.ToListAsync();
            requesttypes = await context.LkRequesttypes.Where(x => x.Status != "del").OrderBy(x => x.Sortby).ToListAsync();
            requeststates = await context.LkRequeststates.Where(x => x.Status != "del").OrderBy(x => x.Sortby).ToListAsync();
            LoadData();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            POIpersonnames = personNameService.GetPOINames();
            personnames = personNameService.GetNames();
            firstRender = false;
        }
    }

    #endregion

    #region "Methods"
    private void ClearSearch()
    {
        POIselectedpersonname = null;
        selectedpersonname = null;
        searchrequestfiles = Enumerable.Empty<Searchrequestfile>().AsQueryable();
        fileInfo = new Searchrequestfile();
        LoadData();
    }

    private void FilterData()
    {
        // LoadData();

        if (fileInfo.Requesttypeid < 0)
        {
            fileInfo.Requesttypeid = null;
        }

        if (fileInfo.Analystassignedid < 0)
        {
            fileInfo.Analystassignedid = null;
        }

        if (fileInfo.Requeststateid < 0)
        {
            fileInfo.Requeststateid = null;
        }
        searchrequestfiles = searchfileService.GetRequestfileList(fileInfo).AsQueryable<Searchrequestfile>();
    }

    private void LoadData()
    {
        if (searchrequestfiles == null  || searchrequestfiles.Count() == 0)
        {
            searchrequestfiles = searchfileService.GetRequestfileList(fileInfo).AsQueryable<Searchrequestfile>();
        }
    }

    private void goToAddPage(int fileid)
    {
        setSession(fileid);
        navigationManager.NavigateTo($"/accessrequests/add/{fileid}");
    }

    private async Task setSession(int fileid)
    {
        if (fileid > 0)
        {
            requestfile = await requestFileService.GetRequestfileById(fileid);

            await sessionStorage.SetItemAsync("RQID", requestfile.Id);
            await sessionStorage.SetItemAsync("objFileRequest", requestfile);

            loginState.SetLogin(await requestFileService.GetRequestfileById(requestfile.Id));
            requestfile = loginState.Requestfile;
        }
    }


    private async Task<IEnumerable<POIName>> SearchPOIpersonName(string searchText)
    {
        //filter data for Blazor Type Ahead
        return await Task.FromResult(POIpersonnames.Where(x => (x.firstname + x.lastname + x.middlename).ToLower().Contains(searchText.ToLower())));
    }

    private async Task<IEnumerable<PersonName>> SearchPersonName(string searchText)
    {
        return await Task.FromResult(personnames.Where(x => (x.firstname + x.lastname + x.middlename).ToLower().Contains(searchText.ToLower())));
    }
    #endregion
}

<EditForm Model="@fileInfo">
    @if (showpanel)
    {
        <p id="searchpanel">
            <div class="row">
                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label>
                        File Number:
                    </label>
                    <InputText id="filenumber" class="form-control" @bind-Value="fileInfo.Filenumber" />
                </div>

                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label>
                        Reference Number:
                    </label>
                    <InputText id="referencenumber" class="form-control" @bind-Value="fileInfo.Referencenumber" />
                </div>

                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label>
                        Analyst:
                    </label>
                    <InputSelect id="analystassignedid" class="form-control" placeholder="ANALYST" @bind-Value="fileInfo.Analystassignedid">
                        <option value="-1">All...</option>
                        @foreach (var lktype in analysts)
                        {
                            <option value="@lktype.Id">@lktype.Displayname</option>
                        }
                    </InputSelect>
                </div>

                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label for="lbrequesttypeid">
                        Request Type:
                    </label>
                    <InputSelect id="requesttypeid" class="form-control" placeholder="REQUEST TYPE" @bind-Value="fileInfo.Requesttypeid">
                        <option value="-1">All...</option>
                        @foreach (var lktype in requesttypes)
                        {
                            <option value="@lktype.Id">@lktype.Detail</option>
                        }
                    </InputSelect>
                </div>

                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label>
                        Request State:
                    </label>
                    <InputSelect id="requeststate" class="form-control" placeholder="REQUEST STATE" @bind-Value="fileInfo.Requeststateid">
                        <option value="-1">All...</option>
                        @foreach (var lktype in requeststates)
                        {
                            <option value="@lktype.Id">@lktype.Detail</option>
                        }
                    </InputSelect>
                </div>

                <div class="col-lg-3 col-md-3 col-sm-12">
                    <label>
                        Person Name:
                    </label>
                    <div class="input-group ">
                        <BlazoredTypeahead class="blazored-typeahead__clear" style="background-color:lightyellow" SearchMethod="SearchPersonName" @bind-Value="selectedpersonname">
                            <SelectedTemplate Context="personname">@personname.firstname @personname.middlename  @personname.lastname</SelectedTemplate>
                            <ResultTemplate Context="personname">@personname.firstname @personname.middlename @personname.lastname </ResultTemplate>
                        </BlazoredTypeahead>
                    </div>
                </div>
                @if (selectedpersonname != null)
                {
                    string lname = string.Empty;
                    string fname = string.Empty;
                    string mname = string.Empty;

                    lname = selectedpersonname.lastname != null ? "," + selectedpersonname.lastname : "";
                    fname = selectedpersonname.firstname != null ? selectedpersonname.firstname : "";
                    mname = selectedpersonname.middlename != null ? " " + selectedpersonname.middlename : "";

                    fileInfo.Personname = lname + fname + mname;
                    fileInfo.Firstname = selectedpersonname.firstname;
                    fileInfo.Lastname = selectedpersonname.lastname;
                    fileInfo.Middlename = selectedpersonname.middlename;
                }

                <div class="col-lg-3 col-md-3 col-sm-12">
                    <label>
                        Subject of Request:
                    </label>
                    <div class="input-group ">
                        <BlazoredTypeahead class="blazored-typeahead__clear" style="background-color:lightyellow" SearchMethod="SearchPOIpersonName" @bind-Value="POIselectedpersonname">
                            <SelectedTemplate Context="POIpersonname">@POIpersonname.firstname @POIpersonname.lastname @POIpersonname.middlename</SelectedTemplate>
                            <ResultTemplate Context="POIpersonname">@POIpersonname.firstname @POIpersonname.lastname @POIpersonname.middlename</ResultTemplate>
                        </BlazoredTypeahead>
                    </div>
                </div>
                @if (POIselectedpersonname != null)
                {
                    string poilname = string.Empty;
                    string poifname = string.Empty;
                    string poimname = string.Empty;

                    poilname = POIselectedpersonname.lastname != null ? "," + POIselectedpersonname.lastname : "";
                    poifname = POIselectedpersonname.firstname != null ? POIselectedpersonname.firstname : "";
                    poimname = POIselectedpersonname.middlename != null ? " " + POIselectedpersonname.middlename : "";

                    fileInfo.PersonOfInterest = poilname + poifname + poimname;
                    fileInfo.POIfirstname = POIselectedpersonname.firstname;
                    fileInfo.POIlastname = POIselectedpersonname.lastname;
                    fileInfo.POImiddlename = POIselectedpersonname.middlename;

                }
                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label>
                        Request Date From:
                    </label>
                    <InputDate id="requestdatefrom" class="form-control" @bind-Value="fileInfo.Requestdate" />
                </div>

                <div class="col-lg-2 col-md-3 col-sm-12">
                    <label>
                        To Request Date
                    </label>
                    <InputDate id="requestdateto" class="form-control" @bind-Value="fileInfo.Requestduedate" />
                </div>

                <div class="col-lg-4 col-md-3 col-sm-12">
                    <label>
                        Request Details:
                    </label>
                    <InputText id="requestdetail" class="form-control" @bind-Value="fileInfo.Requestdetails" />
                </div>

                <div class="col-lg-4 col-md-3 col-sm-12">
                    <label>
                        Status Update:
                    </label>
                    <InputText id="intakenotes" class="form-control" @bind-Value="fileInfo.Intakenotes" />
                </div>
            </div>

        </p>
        <div>
            <button class="btn btn-primary" @onclick="FilterData">Search</button>
            <button type="button" class="btn btn-primary" @onclick="ClearSearch">Reset</button>
        </div>
    }
</EditForm>

<br />

<div class="row" style="width:100%;padding-bottom: 1em;">
    <div class="col-lg-5" style="float:left">
        Show:
        <label><input type="checkbox" @bind="showid" /> Record Id</label>
        &nbsp;&nbsp;&nbsp;
        <label><input type="checkbox" @bind="showyear" /> Year</label>
        &nbsp;&nbsp;&nbsp;
        <label><input type="checkbox" @bind="showpanel" /> Search Panel</label>
    </div>
    <div class="col-lg-5" style="float:left">
        <div class="page-size-chooser">
            Items per page:
            <select @bind="@pagination.ItemsPerPage">
                <option>5</option>
                <option>10</option>
                <option>20</option>
                <option>50</option>
            </select>

        </div>

    </div>
    <div class="col-lg-2" style="float:revert">
        <div class="page-size-chooser">
            <button type="button" class="btn btn-warning" @onclick="()=>goToAddPage(0)">Add New</button>
        </div>
    </div>

</div>

@* Display number of items at the top, instead of bottom *@
<Paginator State="@pagination" />
<div class="grid" tabindex="-1">
    <QuickGrid Items="@searchrequestfiles" Virtualize="true" Pagination="@pagination">
        @if (showid)
        {
            <PropertyColumn Property="@(r => r.Id)" Title="Id" Sortable="true" />
        }

        @if (showyear)
        {
            <PropertyColumn Property="@(r => r.Fileyear)" Title="Year" Sortable="true" />
        }
        <PropertyColumn Property="@(r => r.Id)" Title="Id" Sortable="true" />
        <PropertyColumn Property="@(r => r.Filenumber)" Title="File Number" Sortable="true" />
        <PropertyColumn Property="@(r => r.Referencenumber)" Title="Reference Number" Sortable="true" />
        <PropertyColumn Property="@(r => r.Requestdate)" Title="Request Date" Sortable="true" />
        <PropertyColumn Property="@(r => r.Requestduedate)" Title="Request Due Date" Sortable="true" />
        <PropertyColumn Property="@(r => r.Requesttype)" Title="Request Type" Sortable="true" />
        <PropertyColumn Property="@(r => r.Analystassigned)" Title="Analyst" Sortable="true" />
        <PropertyColumn Property="@(r => r.Personname)" Title="Name" Sortable="true" />
        <PropertyColumn Property="@(r => r.PersonOfInterest)" Title="Subject Of Request" Sortable="true" />
        <PropertyColumn Property="@(r => r.Requeststate)" Title="Request State" Sortable="true" />
        <TemplateColumn Title="Actions">
            <a @onclick="()=>goToAddPage(context.Id)"  class="btn btn-outline-primary">
                <i class="fas fa-edit">Edit</i>
            </a>
        </TemplateColumn>
    </QuickGrid>
</div>
