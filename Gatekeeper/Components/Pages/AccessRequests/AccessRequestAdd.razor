@rendermode InteractiveServer
@using Gatekeeper.Models.MenuInfo
@using Gatekeeper.CustomValidators
@using System.Text
@using System.Web
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Encodings.Web
@using Gatekeeper.Classes;
@using System.Text.RegularExpressions

@inject IConfiguration Configuration
@inject AuthenticationStateProvider authenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService session
@inject IDbContextFactory<AppDbContext> DbFactory

@inject IAuditlogService auditlogService
@inject IJSRuntime JSRuntime
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject LoginState loginState;
@inject AppState appState;
@inject NavigationManager navigationManager

@page "/accessrequests/add/{fileid:int?}"

@code {

    #region "Parameters"
    //Audit
    private AuditLog auditlog = new AuditLog();
    bool otherreason = false;
    bool setTestdata = false;

    private bool tester = false;

    [Parameter]
    public int fileid { get; set; }
    public SelectedmenuInfo currentmenu;

    public bool DisplayAlert { get; set; }
    public List<string> AlertText1 = new List<string>();
    public List<string> AlertText2 = new List<string>();

    [Inject]
    private IRequestfileService requestFileService { get; set; }
    private Requestfile requestfile { get; set; } = new Requestfile();
    private Requestfile orequestfile = new Requestfile();
    private Requestfile Sessionrequestfile { get; set; } = new Requestfile();
    private List<Requestfile>? requestfiles { get; set; } = new List<Requestfile>();

    [Inject]
    private IPersonService personService { get; set; }
    private List<Person> persons { get; set; } = new List<Person>();
    public List<Holiday>? holidays { get; set; } = new List<Holiday>();
    private Person person { get; set; } = new Person();
    private Person operson { get; set; } = new Person();

    private bool alertMessageShow = false;
    private string? SuccessMessage { get; set; }
    
    public List<LkRequesttype>? requestTypes { get; set; } = new List<LkRequesttype>();

    private string thisMachine = string.Empty;
    #endregion

    #region "Component Lifecycle"
    protected async override Task OnInitializedAsync()
    {
        DisplayTab(1);
    }

    public void Dispose()
    {
        loginState.OnChange -= StateHasChanged;
    }

    protected async override Task OnParametersSetAsync()
    {
        if (requestfile.Yearid == 0 || requestfile.Yearid is null)
        {
            requestfile.Filenumber = "TBD";
        }

        var authState = await authenticationProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userReg = user.Identity?.Name.ToString().ToUpper().Replace("CPSENTERPRISE\\", "");

        var AccessPerson = Configuration["Testers"];

        tester = false;
        thisMachine = "";
        if (AccessPerson.Contains(userReg))
        {
            tester = true;
            thisMachine = Environment.MachineName;
        }

        SuccessMessage = "";
        StateHasChanged();
    }

    private string? userReg;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (fileid > 0)
            {
                await sessionStorage.SetItemAsync("RQID", fileid);
                await sessionStorage.SetItemAsync("objFileRequest", requestfile);
                getDataContext();
            }
            else
            {
                var RQID = await sessionStorage.GetItemAsync<string>("RQID");

                if (RQID != "0" && RQID != null)
                {
                    fileid = Int32.Parse(RQID);
                }
            }
            getDataContext();

            #region "set tab and top menu "
            if (fileid > 0)
            {
                JSRuntime.InvokeVoidAsync("activetab");
            }
            else
            {
                JSRuntime.InvokeVoidAsync("disabledtab");
            }

            setTestdata = false;
            JSRuntime.InvokeVoidAsync("showTopmenu");
            JSRuntime.InvokeVoidAsync("changetab", "file-tab");

            #endregion

            StateHasChanged();
            firstRender = false;
        }
        ;
    }
    #endregion

    #region "Methods"
    public void getDataContext()
    {
        using (var context = DbFactory.CreateDbContext())
        {
            holidays = context.Holidays.Where(x => x.Status != "del").ToList(); 
            requestTypes = context.LkRequesttypes.Where(x => x.Status != "del").OrderBy(x => x.Sortby).ToList();
            requestfiles = context.Requestfiles.ToList();
            if (fileid > 0)
            {
                //assigned Access Request File object
                if (loginState.gFileId == 0 || loginState.gFileId == null)
                {
                    loginState.SetLogin(context.Requestfiles.FirstOrDefault(x => x.Id == fileid));
                }

                requestfile = loginState.Requestfile;
                orequestfile = (Requestfile)context.Entry(requestfile).GetDatabaseValues().ToObject();

                if (requestfile.Yearid == 0 || requestfile.Yearid is null)
                {
                    requestfile.Filenumber = "TBD";
                }
                string pattern = "&%23160;";
                Regex defaultRegex = new Regex(pattern);
                MatchCollection matches;

                var _intakeNotes = requestfile.Intakenotes;
                if (!string.IsNullOrEmpty(requestfile.Intakenotes))
                {
                    _intakeNotes = HtmlUtilities.ConvertToPlainText(requestfile.Intakenotes);
                    requestfile.Intakenotes = _intakeNotes.ToString().Replace("&%23160;", "");
                }

                var _requestDetails = requestfile.Requestdetails;
                if (!string.IsNullOrEmpty(requestfile.Requestdetails))
                {
                    _requestDetails = HtmlUtilities.ConvertToPlainText(requestfile.Requestdetails);
                    requestfile.Requestdetails = _requestDetails.ToString().Replace("&%23160;", "");
                }
                person = context.People.Where(x => x.Id == requestfile.Personid).FirstOrDefault();
                operson =(Person)context.Entry(person).GetDatabaseValues().ToObject();
            }
        }
    }

    private void FillData() 
    {
        setTestdata = true;
        person.Firstname = "Donald";
        person.Lastname = "Duck";
        person.Middlename = "D";

        person.Birthdate = DateTime.Today.Date.AddYears(-30);

        person.Email = "dnald@gmail.com";
        person.Daytimephone = "403-305-3197";
        person.Alternatephone = "403-994-888";
        person.Faxphone = "1800-555-784";

        person.Street = "152 1 street";
        person.City = "Calgary";
        person.Province = "Alberta";
        person.Country = "Canada";

        person.Personofinterestfirstname = "Mickey";
        person.Personofinterestlastname = "Mouse";
        person.Personofinterestmiddlename = "MD";

        person.Companyname = "Disney";

        requestfile.Requestdate = DateTime.Today.Date;
        requestfile.Receivedate = DateTime.Today.Date;
        setDuedate();
        requestfile.Referencenumber = "RF";
        requestfile.Idviewed = 0;
        requestfile.Requesttypeid = 1;
        requestfile.Recorddeliverymethodid = 1;
        requestfile.Processingdeficiency = 1;
        requestfile.Analystassignedid = 9;
        requestfile.Requestdetails = "Request Details For";
        requestfile.Previousrequests = "Test";
        requestfile.Intakenotes = "Intake Notes For";
        requestfile.Timeframe = "1 month";
        requestfile.Moddate = DateTime.Today;
        requestfile.Moduser = userReg;
        requestfile.Createdate = DateTime.Today;
        requestfile.Createuser = userReg;
    }

    private async Task ValidSubmit()
    {
        ValidateData();

        if (AlertText1.Count > 0 || AlertText2.Count > 0)
        {
            DisplayAlert = true;
        }
        else
        {
            DisplayAlert = false;

            if (person.Id != 0 && requestfile.Id != 0)
            {
                person.Moduser = userReg;
                person.Moddate = DateTime.Today;

                requestfile.Moduser = userReg;
                requestfile.Moddate = DateTime.Today;

                await personService.UpdatePerson(person);
                await AuditData("update Person","update person");
                await Task.Delay(1000);
                await UpdateFileNumber(requestfile.Id);

                SuccessMessage = "Data updated successfully";
            }
            else
            {
                person.Moduser = userReg;
                person.Createdby = userReg;

                person.Moddate = DateTime.Today;
                person.Createdate = DateTime.Today;
                await personService.CreatePerson(person);
                await AuditData("create Person", "create person");
                if (person.Id != null)
                {
                    requestfile.Personid = person.Id;
                    requestfile.Moduser = userReg;
                    requestfile.Createuser = userReg;

                    requestfile.Moddate = DateTime.Today;
                    requestfile.Createdate = DateTime.Today;

                    /*********************************************************/
                    /**** Create Request File without Receive Date First  ****/
                    /*********************************************************/

                    await requestFileService.CreateRequestfile(requestfile);
                    await AuditData("Create RequestFile","create file");
                    await Task.Delay(1000);
                    await UpdateFileNumber(requestfile.Id);
                    await sessionStorage.SetItemAsync("RQID", requestfile.Id);
                    await sessionStorage.SetItemAsync("objFileRequest", requestfile);
                    loginState.SetLogin(await requestFileService.GetRequestfileById(requestfile.Id));

                    if (requestfile.Id > 0)
                    {
                        JSRuntime.InvokeVoidAsync("activetab");
                    }
                    else
                    {
                        JSRuntime.InvokeVoidAsync("disabledtab");
                    }

                    SuccessMessage = "Data saved successfully";
                }

            }
            alertMessageShow = true;
            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(1000);
            alertMessageShow = false;
        }

        navigationManager.NavigateTo($"/accessrequests/add/{fileid}", true);
    }

    private async Task UpdateFileNumber(int fileid)
    {
        Requestfile updatefile = requestfile;

        var rtype = requestTypes.Where(x => x.Id == requestfile.Requesttypeid).FirstOrDefault();

        // If receive date is not null then update file number with new format
        if (updatefile.Filenumber == "TBD" && requestfile.Receivedate != null)
        {
            updatefile = requestfile;

            int year = ((DateTime)updatefile.Receivedate).Year;
            updatefile.Yearid = requestfiles.Where(x => x.Receivedate.ToString().Contains(year.ToString())).Count() + 1;
        }

        if (updatefile.Yearid != null)
        {
            updatefile.Filenumber = ((DateTime)requestfile.Receivedate).Year + "-" + rtype.Refertype + "-" + ((int)requestfile.Yearid).ToString("D4");
            // Start Test Data
            if (setTestdata)
            {
                updatefile.Referencenumber = "RF " + requestfile.Filenumber;
                updatefile.Requestdetails = "Request Details For " + requestfile.Filenumber;
                updatefile.Previousrequests = "Test For " + requestfile.Filenumber;
                updatefile.Intakenotes = "Intake Notes For " + requestfile.Filenumber;

            }
        }
        await requestFileService.UpdateRequestfile(updatefile);

        await Task.Delay(1000);
        await AuditData("update RequestFile","update file");

        requestfile = updatefile;
        StateHasChanged();
    }

    private async Task AuditData(string act,string type)
    {
        auditlog = new AuditLog();

        auditlog.AccessDate = DateTime.Now;
        auditlog.RegNo = userReg;
        auditlog.Sdate = DateTime.Now;
        auditlog.UserName = userReg;
        auditlog.AccessSystem = "GateKeeper";
        auditlog.Activity = act;

        if (type == "update person" || type == "delete person")
        {

            auditlog.ActivityXml = auditlogService.GetAuditxml(operson, person, act).ToString();
        }

        if (type == "update file" || type == "delete file")
        {
            auditlog.ActivityXml = auditlogService.GetAuditxml(orequestfile, requestfile, act).ToString();

        }

        await auditlogService.CreateAuditlog(auditlog);
    }

    private void ClearData()
    {
        requestfile = new Requestfile();
        person = new Person();
        requestfile.Filenumber = "TBD";
        session.ClearAsync();
    }

    private void ValidateData()
    {
        AlertText1 = new List<string>();

        if (requestfile != null)
        {
            if (requestfile.Requestdate == null)
            {
                AlertText1.Add("- Request Date");
            }

            if (requestfile.Idviewed == null || requestfile.Idviewed < 0)
            {
                AlertText1.Add("- ID Viewed");
            }

            if (requestfile.Requesttypeid == null || requestfile.Requesttypeid < 0)
            {
                AlertText1.Add("- Request Type");
            }

            if (requestfile.Analystassignedid == null || requestfile.Analystassignedid < 0)
            {
                AlertText1.Add("- Analyst");
            }

            if (requestfile.Requestdetails == null)
            {
                AlertText1.Add("- Request Details");
            }


            if (requestfile.Requeststate != null)
            {
                string reqStateStr = string.Empty;
                using (var context = DbFactory.CreateDbContext())
                {
                    reqStateStr = context.LkRequeststates.Where(x => x.Id == requestfile.Requeststate).FirstOrDefault().Detail.ToString();
                }

                if (reqStateStr.ToLower() == "closed" || reqStateStr.ToLower() == "withdrawn" || reqStateStr.ToLower() == "abandoned")
                {
                    if (requestfile.Closedate == null)
                    {
                        AlertText1.Add("- Specify Closed Date for Closed, Abandoned, and Withdrawn state types.");
                    }
                }

            }

            if (AlertText1.Count > 0)
            {
                AlertText1.Insert(0, "The access file request Information below is required.");
            }
        }
        else
        {
            AlertText1.Add("Access Request is required.");
        }

        AlertText2 = new List<string>();
        if (person != null || person.Id == 0)
        {
            if (person.Firstname == null)
            {
                AlertText2.Add("- First Name");
            }

            if (person.Street == null)
            {
                AlertText2.Add("- Street");
            }

            if (person.City == null)
            {
                AlertText2.Add("- City");
            }

            if (person.Province == null)
            {
                AlertText2.Add("- Province");
            }

            if (person.Daytimephone == null)
            {
                AlertText2.Add("- Daytime Phone");
            }
            if (AlertText2.Count > 0)
            {
                AlertText2.Insert(0, "The person request Information below is required.");
            }
        }
        else
        {
            AlertText2.Add("Person Request is required.");
        }
    }

    public void setDuedate()
    {
        if (requestfile.Receivedate != null)
        {
            List<DateTime> dateRange1 = new List<DateTime>();
            List<DateTime> dateRange2 = new List<DateTime>();

            DateTime dueDate = (DateTime)requestfile.Receivedate;
            DateTime setDate;

            dueDate = ((DateTime)requestfile.Receivedate).AddDays(30);

            for (int i = 1; i < 11; i++)
            {
                setDate = dueDate.AddDays(i);
                if ((int)setDate.DayOfWeek != 0 && (int)setDate.DayOfWeek != 6)
                {
                    dateRange1.Add(setDate);
                    dateRange2.Add(setDate);
                }
            }

            //Remove holidays
            var thisYearHolidays = holidays.Where(x => ((DateTime)x.Holidaydate).Year == DateTime.Today.Year && x.Holidayname != null);

            foreach (var item in thisYearHolidays)
            {
                foreach (var dt in dateRange1)
                {
                    int y = dateRange1.IndexOf(dt);
                    if (dt.Date.ToString() == ((DateTime)item.Holidaydate).Date.ToString())
                    {
                        dateRange2.RemoveAt(y);
                    }
                }
            }

            requestfile.Requestduedate = dateRange2.FirstOrDefault();
        }
    }

    #region Tab menu
    private bool tab1 = true;
    private bool tab2 = true;
    private bool tab3 = true;

    public void DisplayTab(int TabNumber)
    {
        DisplayAlert = false;
        switch (TabNumber)
        {
            case 1:
                this.tab1 = true;
                this.tab2 = false;
                this.tab3 = false;
                break;
            case 2:
                this.tab1 = false;
                this.tab2 = true;
                this.tab3 = false;
                break;
            case 3:
                this.tab1 = false;
                this.tab2 = false;
                this.tab3 = true;
                break;
            default:
                this.tab1 = true;
                this.tab2 = false;
                this.tab3 = false;
                break;
        }

    }
    #endregion

    #endregion
}


<h5>Access Request : @thisMachine</h5>

<nav>
    <div class="nav nav-tabs" id="nav-tab" role="tablist">
        <button class="@(tab1?"nav-link active":"nav-link")" @onclick="x=>DisplayTab(1)">File Detail</button>
    </div>
</nav>

<EditForm Model="requestfile" OnValidSubmit="@ValidSubmit">

    @if (alertMessageShow)
    {
        <br />
        <div class="alert alert-success" style="margin-left: 50px">@SuccessMessage</div>
    }
    @if (DisplayAlert)
    {
        <div class="alert alert-danger fade-in" role="alert" style="width:auto;border:solid;border-color:darkred;">
            @if (AlertText1.Count > 0)
            {

                @foreach (var item in AlertText1)
                {
                    <div>&nbsp; @item</div>

                }
            }
            @if (AlertText2.Count > 0)
            {

                @foreach (var item in AlertText2)
                {
                    <div>&nbsp; @item</div>
                }
            }
        </div>
    }

    @if (tab1)
    {
        <br />
        <div class="tabcontent">
            
            <RequestFileForm requestfile="@requestfile" person="@person" />
        </div>
    }

    @if (tab2)
    {
        <br />
        <div class="tabcontent">
            <PersonRequestForm person="@person" />..
        </div>
    }

    @if (tab3)
    {
        <br />
        <div class="tabcontent">
            Three
        </div>
    }
    <br />
    @if (tester)
    {
        <button type="button" class="btn btn-primary" @onclick="FillData">Fill Data</button>
    }
    &nbsp;
    <button type="button" class="btn btn-primary" @onclick="ClearData">Add New</button>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>
