@rendermode InteractiveServer
@using System.Text
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Encodings.Web
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorBootstrap
@using System.Reflection;
@using System;


@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authenticationProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@inject IAnalystsService analystService
@inject IRequestfileService requestFileService
@inject IAuditlogService auditlogService
@inject NavigationManager navigationManager



@page "/analyst/add"

@code {
    #region "Variables"
    private System.Security.Claims.ClaimsPrincipal user;
    private string? userReg;
    protected string Message = string.Empty;
    protected string StatusClass = string.Empty;
    private bool Saved;
    private string savetype = string.Empty;
    private string FileNumber = string.Empty;
    private bool alertMessageShow = false;

    [Parameter]
    public int fileid { get; set; }

    //Audit
    private AuditLog auditlog = new AuditLog();

    [Inject]
    private AuthenticationStateProvider GetAuthenticationStateAsync { get; set; }

    [Inject]
    private IAnalystsService AnalystService { get; set; }
    private Analyst analyst { get; set; } = new Analyst();
    private Analyst oanalyst { get; set; } = new Analyst();
    private List<Analyst> analysts { get; set; } = new List<Analyst>();

    private Requestfile requestfile { get; set; } = new Requestfile();



    //Data Grid -- Blazor QuickGrid
    private IQueryable<Analyst> searchanalysts;
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    QuickGrid<Searchrequestfile>? grid;

    bool showpanel = true;
    bool showid = true;

    #endregion


    #region "Component Lifecycle"
    protected async override Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity.Name;

        analysts = (await AnalystService.GetAnalystsList()).ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userReg = user.Identity?.Name.ToString().ToUpper().Replace("CPSENTERPRISE\\", "");
        analysts = (await analystService.GetAnalystsList()).ToList();
    }


    protected async override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            LoadData();

            savetype = string.Empty;
            StateHasChanged();
            firstRender = false;
        }
    }
    #endregion
    #region "Methods"

    private async void LoadData()
    {
        searchanalysts = analysts.ToList().AsQueryable<Analyst>();
        //(await analystService.GetAnalystsList()).ToList().AsQueryable<Analyst>();
    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        Message = "There are some validation errors. Please try again.";
    }

    protected async Task HandleValidSubmit()
    {
        Saved = false;

        analyst.Moddate = DateTime.Now;
        analyst.Moduser = userReg;

        if (savetype == "update")
        {
            await AnalystService.UpdateAnalysts(analyst);
            await AuditData("Update Analyst", "update");
        }
        else
        {
            analyst.Createdate = DateTime.Now;
            analyst.Createuser = userReg;
            await AnalystService.CreateAnalysts(analyst);
            await AuditData("Create Analyst", "create");

        }

        StatusClass = "alert-success";
        Message = "Data updated successfully";
        alertMessageShow = true;
        await InvokeAsync(() => StateHasChanged());
        await Task.Delay(1000);

        alertMessageShow = false;
        Saved = true;
        navigationManager.NavigateTo($"/analyst/add", true);
        //LoadData();
        //analyst = new Analyst();
        //StateHasChanged();
    }

    private async Task AuditData(string act, string type)
    {
        auditlog.AccessDate = DateTime.Now;
        auditlog.RegNo = userReg;
        auditlog.Sdate = DateTime.Now;
        auditlog.UserName = userReg;
        auditlog.AccessSystem = "GateKeeper";
        auditlog.Activity = act;
        auditlog.ActivityXml = auditlogService.GetAuditxml(oanalyst, analyst, act).ToString();

        if (type == "update" || type == "delete")
        {
            auditlog.ActivityXml = auditlogService.GetAuditxml(oanalyst, analyst, act).ToString();
        }

        await auditlogService.CreateAuditlog(auditlog);
    }



    protected async Task SaveAnalystData()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var username = user.Identity.Name;
        // analyst = await AnalystService.CreateAnalyst(analyst);
        //analyst.{firstuppercolname} = analyst.{fieldname};

        analyst.Moduser = username;
        analyst.Createdate = DateTime.Now;
        analyst.Moddate = DateTime.Now;
        analyst = await AnalystService.CreateAnalysts(analyst);
    }


    private async void UpdateData(int id)
    {
        savetype = "";
        if (id > 0)
        {
            savetype = "update";
            GetData(id);
        }
    }

    private async void GetData(int id)
    {
        if (id != null && id > 0)
        {
            oanalyst = await AnalystService.GetAnalystsById(id);
            analyst = await AnalystService.GetAnalystsById(id);
            StateHasChanged();
        }
    }

    private ConfirmDialog dialog = default!;
    private async Task ShowConfirmationAsync(int id)
    {
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the record. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            if (id != null && id > 0)
            {
                analyst = await AnalystService.GetAnalystsById(id);
                await AnalystService.DeleteAnalysts(analyst);
                AuditData("Delete Analyst", "delete");
            }

            StatusClass = "alert-success";
            Message = "Data deleted successfully";
            alertMessageShow = true;
            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(1000);

            alertMessageShow = false;
            Saved = true;

            navigationManager.NavigateTo($"/analyst/add", true);

            LoadData();
            StateHasChanged();
        }
        else
        {
            // do something
        }
    }

    private void ClearData()
    {
        
        analyst = new Analyst();
    }
    
 

    private void FillData()
    {

        analyst.Regno = "POL6666";
        analyst.Localname = "Mickey Mouse";
        analyst.Displayname = "displayname";
        analyst.Email = "POL666@calgarypolice.ca";
        analyst.Role = "Admin";
        //analyst.Status = "";
        analyst.Moddate = DateTime.Now;
        analyst.Moduser = userReg;
        analyst.Createdate = DateTime.Now;
        analyst.Createuser = userReg;
    }


    private void prefilldata()
    {
        if (!analyst.Regno.ToLower().Contains("po"))
        {
            analyst.Regno = "POL" + analyst.Regno;
            analyst.Email = analyst.Regno + "@calgarypolice.ca";
        }

        if (analyst.Localname != ""  && analyst.Localname != null)
        {

            analyst.Displayname = analyst.Localname;
        }
        StateHasChanged();
    }


    #endregion

}

   @if (alertMessageShow)
{
    <br />
    <div class="alert @StatusClass" style="margin-left: 50px">@Message</div>
}


<h5>Analyst</h5>

<EditForm Model="@analyst" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbregno">
                    Regno:
                </label>
                <InputText id="regno" class="form-control" placeholder="REGNO" @onblur="prefilldata" @onchange="prefilldata" @bind-Value="analyst.Regno" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lblocalname">
                    Localname:
                </label>
                <InputText id="localname" class="form-control" placeholder="LOCALNAME" @onblur="prefilldata" @onchange="prefilldata" @bind-Value="analyst.Localname" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbdisplayname">
                    Displayname:
                </label>
                <InputText id="displayname" class="form-control" placeholder="DISPLAYNAME" @bind-Value="analyst.Displayname" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbemail">
                    Email:
                </label>
                <InputText id="email" class="form-control" placeholder="EMAIL" @bind-Value="analyst.Email" />
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                <label for="lbrole">
                    Role:
                </label>
                <InputSelect id="role" class="form-control" placeholder="ROLE" @bind-Value="analyst.Role">
                    <option value="-1">Select...</option>
                    <option value="Admin">Admin</option>
                    <option value="Intake">Intake</option>
                    <option value="Privacy Counsel">Privacy Counsel</option>
                </InputSelect>
            </div>
        </div>
    </div>

    <hr />

    <button type="button" class="btn btn-primary" @onclick="FillData">Fill Data</button>
    <button type="button" class="btn btn-primary" @onclick="ClearData">Add New</button>
    <button type="submit" class="btn btn-primary">Save</button>

</EditForm>


<br />

<div class="row" style="width:100%;padding-bottom: 1em;">
    <div class="col-lg-5" style="float:left">
        <div class="page-size-chooser">
            Items per page:
            <select @bind="@pagination.ItemsPerPage">
                <option>3</option>
                <option>5</option>
                <option>10</option>
            </select>

        </div>
    </div>
    <div class="col-lg-2" style="float:revert">
        <div class="page-size-chooser">
        </div>
    </div>
</div>

<ConfirmDialog @ref="dialog" />


<div class="grid" tabindex="-1">
    <QuickGrid Items="@searchanalysts" Virtualize="true" Pagination="@pagination">
        <PropertyColumn Property="@(r => r.Regno)" Title="Regno" Sortable="true" />
        <PropertyColumn Property="@(r => r.Localname)" Title="Localname" Sortable="true" class="col-width" /> 
        <PropertyColumn Property="@(r => r.Displayname)" Title="Displayname" Sortable="true" class="col-width" /> 
        <PropertyColumn Property="@(r => r.Email)" Title="Email" Sortable="true" />
        <PropertyColumn Property="@(r => r.Role)" Title="Role" Sortable="true" />
        <TemplateColumn Title="Actions">
            <button type="button" class="btn btn-primary" onclick="@(()=>UpdateData(context.Id))">Edit</button>
            <button type="button" class="btn btn-primary" onclick="@(()=>ShowConfirmationAsync(context.Id))">Del</button>
        </TemplateColumn>
    </QuickGrid>
</div>

<Paginator State="@pagination" />
